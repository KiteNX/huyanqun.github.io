<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>在 Vue 中进行日期格式转换</title>
    <link href="/huyanqun.github.io/2024/10/17/%E5%9C%A8-Vue-%E4%B8%AD%E8%BF%9B%E8%A1%8C%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/"/>
    <url>/huyanqun.github.io/2024/10/17/%E5%9C%A8-Vue-%E4%B8%AD%E8%BF%9B%E8%A1%8C%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<blockquote><p>日期和时间的格式转换在前端开发中是一个常见需求，特别是在处理从后端获取到的时间数据时。本文将介绍如何在 Vue 中使用原生 JavaScript 和第三方库 <code>dayjs</code> 进行日期和时间格式转换，并展示两种实现方法的优缺点</p></blockquote><h3 id="使用原生-JavaScript-进行日期格式转换"><a href="#使用原生-JavaScript-进行日期格式转换" class="headerlink" title="使用原生 JavaScript 进行日期格式转换"></a>使用原生 JavaScript 进行日期格式转换</h3><blockquote><p>在 Vue 中，原生的 <code>Date</code> 对象提供了基础的日期操作能力。借助 <code>Intl.DateTimeFormat</code>，我们可以方便地按照特定的区域和格式对日期进行处理。以下是如何使用原生 JavaScript 在 Vue 中进行日期格式转换的示例</p></blockquote><blockquote><p>template 布局容器</p><p><code>:data=&quot;List&quot;</code> 的数据来源于接口 当然也可以自己 <code>mock</code>假数据</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-table :data=&quot;List&quot;&gt;<br>  &lt;el-table-column prop=&quot;Name&quot; label=&quot;名称&quot; /&gt;<br>  &lt;el-table-column label=&quot;最大时间&quot;&gt;<br>    &lt;template #default=&quot;scope&quot;&gt;<br>      &#123;&#123; formatTime(scope.row.maxTime) &#125;&#125;<br>    &lt;/template&gt;<br>  &lt;/el-table-column&gt;<br>&lt;/el-table&gt;<br></code></pre></td></tr></table></figure><blockquote><p>script </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">formatTime</span> = (<span class="hljs-params">time: any</span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (!time) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-comment">// 将 ISO 时间转换为 Date 对象</span><br>  <span class="hljs-keyword">const</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(time);<br>  <span class="hljs-comment">// 使用 Intl.DateTimeFormat 进行格式化</span><br>  <span class="hljs-keyword">const</span> formatter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intl</span>.<span class="hljs-title class_">DateTimeFormat</span>(<span class="hljs-string">&quot;zh-CN&quot;</span>, &#123;<br>    <span class="hljs-attr">year</span>: <span class="hljs-string">&quot;numeric&quot;</span>,<br>    <span class="hljs-attr">month</span>: <span class="hljs-string">&quot;long&quot;</span>,<br>    <span class="hljs-attr">day</span>: <span class="hljs-string">&quot;numeric&quot;</span>,<br>    <span class="hljs-attr">hour</span>: <span class="hljs-string">&quot;numeric&quot;</span>,<br>    <span class="hljs-attr">minute</span>: <span class="hljs-string">&quot;numeric&quot;</span>,<br>    <span class="hljs-attr">second</span>: <span class="hljs-string">&quot;numeric&quot;</span>,<br>  &#125;);<br>  <span class="hljs-keyword">return</span> formatter.<span class="hljs-title function_">format</span>(date);   <span class="hljs-comment">// 返回格式化后的日期时间</span><br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="效果展示："><a href="#效果展示：" class="headerlink" title="效果展示："></a>效果展示：</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">原始时间: 2024-10-14T16:00:00</span><br><span class="hljs-section">格式化后的时间: 2024年10月14日 16:00:00</span><br></code></pre></td></tr></table></figure><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ul><li><strong>无需外部依赖</strong>：直接使用浏览器的 <code>Date</code> 对象，减少打包体积。</li><li><strong>区域化支持</strong>：<code>Intl.DateTimeFormat</code> 支持多种语言和区域格式。</li></ul><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><ul><li><strong>功能有限</strong>：对于复杂的日期处理场景（如时区转换、日期加减运算），原生方法的支持不够友好。</li><li><strong>代码复杂度较高</strong>：处理不同格式或自定义格式需要更多代码。</li></ul><h3 id="使用-dayjs-进行日期格式转换"><a href="#使用-dayjs-进行日期格式转换" class="headerlink" title="使用 dayjs 进行日期格式转换"></a>使用 <code>dayjs</code> 进行日期格式转换</h3><blockquote><p>相比于原生 JavaScript，<code>dayjs</code> 是一个轻量级的日期处理库，提供了丰富的 API 来简化日期处理任务。它的语法简单，支持插件扩展，并且与 <code>moment.js</code> 有相似的用法，但体积更小</p></blockquote><p><strong>安装 dayjs</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install dayjs<br></code></pre></td></tr></table></figure><p>示例代码：</p><blockquote><p>template 布局容器 跟上面原生的一样</p></blockquote><blockquote><p>script   在你的 Vue 组件中引入 <code>dayjs</code> </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> dayjs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;dayjs&#x27;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">formatTime</span> = (<span class="hljs-params">time: any</span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (!time) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">dayjs</span>(time).<span class="hljs-title function_">format</span>(<span class="hljs-string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p><code>format(&quot;YYYY-MM-DD HH:mm:ss&quot;)</code> 格式是自己定的 看自己喜好 当然也可以是 <code>format(&#39;YYYY年MM月DD日 HH:mm:ss&#39;)</code>  </p></blockquote><h4 id="效果展示：-1"><a href="#效果展示：-1" class="headerlink" title="效果展示："></a>效果展示：</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">原始时间: 2024-10-14T16:00:00</span><br><span class="hljs-section">格式化后的时间: 2024-10-14 16:00:00</span><br></code></pre></td></tr></table></figure><h4 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h4><ul><li><strong>轻量高效</strong>：<code>dayjs</code> 非常轻量，体积比 <code>moment.js</code> 小得多，但保留了大部分功能。</li><li><strong>API 简单易用</strong>：链式调用和简单的格式化规则使得代码更简洁。</li><li><strong>插件支持</strong>：可以根据需要添加插件，例如支持时间相对计算、时区处理等功能。</li></ul><h4 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h4><ul><li><strong>额外依赖</strong>：需要引入第三方库，尽管它非常轻量。</li></ul><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>在 Vue 项目中，处理日期格式的转换可以根据需求选择不同的方法。如果项目对日期处理的需求较为基础，原生的 JavaScript <code>Date</code> 对象已经足够应对。然而，若是需要更多的日期处理功能，比如时区转换、日期计算等，<code>dayjs</code> 则是一个优秀的选择</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入解析 GET 与 POST 请求的区别与传参方式详解</title>
    <link href="/huyanqun.github.io/2024/10/15/%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90-GET-%E4%B8%8E-POST-%E8%AF%B7%E6%B1%82%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E4%BC%A0%E5%8F%82%E6%96%B9%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
    <url>/huyanqun.github.io/2024/10/15/%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90-GET-%E4%B8%8E-POST-%E8%AF%B7%E6%B1%82%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E4%BC%A0%E5%8F%82%E6%96%B9%E5%BC%8F%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在前端开发中，常常会用到 <code>GET</code> 和 <code>POST</code> 请求来与后端进行数据交互。<code>GET</code> 和 <code>POST</code> 的主要区别不仅仅在于 HTTP 方法的不同，还在于数据传递的方式以及适用场景。具体来说，<code>GET</code> 使用 URL 参数传递数据，而 <code>POST</code> 使用请求体（body）传递数据</p></blockquote><h3 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a><code>GET</code> 请求</h3><h4 id="传参方式：params"><a href="#传参方式：params" class="headerlink" title="传参方式：params"></a>传参方式：<code>params</code></h4><ul><li><strong>GET 请求通过 URL 传递参数</strong>，参数会被拼接在请求 URL 的末尾。</li><li>参数格式通常是 <code>?key=value</code> 的形式，多个参数用 <code>&amp;</code> 分隔。</li><li>传递参数时在 <code>Axios</code> 或其他 HTTP 库中通过 <code>params</code> 字段来传递参数。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 使用 GET 请求通过 params 传递参数</span><br>axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/api/customer&#x27;</span>, &#123;<br>  <span class="hljs-attr">params</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;John Doe&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">30</span>,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><blockquote><p>请求的 URL 会自动变为 <code>/api/customer?name=John%20Doe&amp;age=30</code>，参数被附加在 URL 后面</p></blockquote><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ul><li><strong>可见性</strong>：<code>GET</code> 请求的参数会暴露在 URL 中，浏览器地址栏也可以看到这些参数，因此不适合传递敏感数据。</li><li><strong>长度限制</strong>：<code>GET</code> 请求的 URL 长度通常有限制（大多数浏览器限制在 2048 个字符以内），所以不适合传递大量数据。</li><li><strong>缓存性</strong>：<code>GET</code> 请求可以被缓存，这意味着在多次请求相同的 URL 时，浏览器可能直接使用缓存的响应。</li><li><strong>幂等性</strong>：<code>GET</code> 请求是幂等的，这意味着对同一资源进行多次相同的 <code>GET</code> 请求，返回的结果应该是相同的，不会产生副作用。</li></ul><h4 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h4><ul><li>获取资源或数据，通常用于查询操作。</li><li>适用于参数数量较少，且数据无需保密的场景。</li><li>可以用于希望通过 URL 书签或分享链接传递查询条件的场景。</li></ul><h3 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a><code>POST</code> 请求</h3><h4 id="传参方式：data"><a href="#传参方式：data" class="headerlink" title="传参方式：data"></a>传参方式：<code>data</code></h4><ul><li><strong>POST 请求通过请求体（body）传递参数</strong>，参数不会显示在 URL 中。</li><li>数据格式通常为 JSON、表单数据（<code>application/x-www-form-urlencoded</code>）或二进制数据（如文件上传）。</li><li>传递参数时在 <code>Axios</code> 或其他 HTTP 库中通过 <code>data</code> 字段来传递。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 使用 POST 请求通过 data 传递参数</span><br>axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/customer&#x27;</span>, &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;John Doe&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">30</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><blockquote><p>参数 <code>name</code> 和 <code>age</code> 会包含在请求体中，并不会出现在 URL 中。</p></blockquote><h4 id="特点：-1"><a href="#特点：-1" class="headerlink" title="特点："></a>特点：</h4><ul><li><strong>数据保密性更好</strong>：参数不会暴露在 URL 中，适合传递敏感数据。</li><li><strong>没有长度限制</strong>：<code>POST</code> 请求的数据是通过请求体传递的，理论上没有长度限制，可以传递大量数据。</li><li><strong>不能被缓存</strong>：通常 <code>POST</code> 请求不会被缓存，因为它通常用于修改或创建资源。</li><li><strong>非幂等性</strong>：<code>POST</code> 请求通常不是幂等的，这意味着多次相同的 <code>POST</code> 请求可能会导致不同的结果，例如重复提交表单可能导致多次插入记录。</li></ul><h4 id="使用场景：-1"><a href="#使用场景：-1" class="headerlink" title="使用场景："></a>使用场景：</h4><ul><li>创建资源或更新资源时使用（如提交表单、上传文件）。</li><li>传递大量数据或敏感数据时使用。</li><li>数据修改或写操作</li></ul><h3 id="GET-和-POST-请求的主要区别"><a href="#GET-和-POST-请求的主要区别" class="headerlink" title="GET 和 POST 请求的主要区别"></a><code>GET</code> 和 <code>POST</code> 请求的主要区别</h3><table><thead><tr><th>特点</th><th><code>GET</code> 请求</th><th><code>POST</code> 请求</th></tr></thead><tbody><tr><td><strong>传递方式</strong></td><td>参数通过 URL（<code>params</code>）传递</td><td>参数通过请求体（<code>data</code>）传递</td></tr><tr><td><strong>可见性</strong></td><td>参数可见，暴露在 URL 中</td><td>参数不可见，隐藏在请求体中</td></tr><tr><td><strong>数据长度</strong></td><td>有长度限制（通常 2048 个字符以内）</td><td>理论上没有限制，适合传递大量数据</td></tr><tr><td><strong>缓存</strong></td><td>可以被缓存</td><td>不会被缓存</td></tr><tr><td><strong>适用场景</strong></td><td>主要用于查询数据（获取资源）</td><td>主要用于提交数据（创建、修改资源）</td></tr><tr><td><strong>幂等性</strong></td><td>幂等的，重复请求不会改变资源状态</td><td>通常不是幂等的，重复请求可能会产生副作用</td></tr><tr><td><strong>敏感数据</strong></td><td>不适合传递敏感数据</td><td>适合传递敏感数据</td></tr><tr><td><strong>书签&#x2F;分享</strong></td><td>URL 可以被书签或分享，传递查询参数</td><td>不适合用于需要通过 URL 传递的场景</td></tr></tbody></table><h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><ul><li><strong>GET 请求</strong>：适用于查询、获取资源的场景，参数通过 URL 传递，有限制且容易被缓存，不适合传递敏感数据。</li><li><strong>POST 请求</strong>：适用于创建或修改资源，参数通过请求体传递，安全性好，适合传递大数据或敏感数据。</li></ul><p><span class="label label-primary">在使用 <code>GET</code> 时，传参使用 <code>params</code>，而在 <code>POST</code> 请求时，传参则使用 <code>data</code>。</span></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTTP协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo 配置评论功能（utterances）</title>
    <link href="/huyanqun.github.io/2024/10/11/hexo-%E9%85%8D%E7%BD%AE%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%EF%BC%88utterances%EF%BC%89/"/>
    <url>/huyanqun.github.io/2024/10/11/hexo-%E9%85%8D%E7%BD%AE%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%EF%BC%88utterances%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>在 Fluid 主题（通常用于 Hexo 博客）中安装 <code>utterances</code>（一个基于 GitHub Issues 的评论系统）</p><h3 id="1-安装-Fluid-主题"><a href="#1-安装-Fluid-主题" class="headerlink" title="1.安装 Fluid 主题"></a>1.安装 Fluid 主题</h3><p>确保你已经正确安装并配置了 Fluid 主题。如果还没有安装，你可以按照 Fluid 官方文档 完成主题安装。</p><h3 id="2-注册-GitHub-账号"><a href="#2-注册-GitHub-账号" class="headerlink" title="2.注册 GitHub 账号"></a>2.注册 GitHub 账号</h3><p>Utterances 依赖于 GitHub Issues 作为评论数据源，所以<code>你需要有一个 GitHub 仓库作为评论存储地</code>。如果还没有，你需要<code>创建一个新的 GitHub 仓库</code>：</p><p>创建一个新的公开或私有仓库，用于存储评论</p><img src="new.png" class="custom-img" /><p>github安装utterances </p><img src="utterances.png" class="custom-img" /><img src="insUtterances.png" class="custom-img" /><h3 id="3-启用-Utterances"><a href="#3-启用-Utterances" class="headerlink" title="3.启用 Utterances"></a>3.启用 Utterances</h3><p>Utterances 是通过 HTML 脚本嵌入到页面中的，Fluid 主题通常提供了一个集成评论系统的配置方式。你只需要在<code>主题的 _config.yml</code> 中添加 Utterances 的相关配置。</p><p>编辑你的主题配置文件 <code>_config.fluid.yml</code> 或者 <code>themes/fluid/_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 评论插件</span><br><span class="hljs-comment"># Comment plugin</span><br><span class="hljs-attr">comments:</span><br><span class="hljs-comment">#开启评论插件</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 指定的插件，需要同时设置对应插件的必要参数</span><br>  <span class="hljs-comment"># The specified plugin needs to set the necessary parameters at the same time</span><br>  <span class="hljs-comment"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">utterances</span><br></code></pre></td></tr></table></figure><p>配置utterances插件 在_config.fluid.yml文件找到utterances进行修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Utterances</span><br><span class="hljs-comment"># 基于 GitHub Issues</span><br><span class="hljs-comment"># Based on GitHub Issues</span><br><span class="hljs-comment"># See: https://utteranc.es</span><br><span class="hljs-attr">utterances:</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">&lt;你的</span> <span class="hljs-string">GitHub</span> <span class="hljs-string">用户名&gt;/&lt;你的仓库名&gt;</span>  <span class="hljs-comment"># 例如: yourusername/yourrepo</span><br>  <span class="hljs-attr">issue_term:</span> <span class="hljs-string">pathname</span><br>  <span class="hljs-attr">label:</span> <span class="hljs-string">utterances</span><br>  <span class="hljs-attr">theme:</span> <span class="hljs-string">github-light</span><br>  <span class="hljs-attr">theme_dark:</span> <span class="hljs-string">github-dark</span><br></code></pre></td></tr></table></figure><p>配置说明：</p><ul><li><code>repo</code>：填写你的 GitHub 用户名和评论用的仓库名，格式为 <code>username/repository</code>。</li><li><code>issue_term</code>：定义评论关联方式，通常使用 <code>pathname</code> 或 <code>url</code>。</li><li><code>theme</code>：Utterances 支持不同的主题风格，你可以选择 <code>github-light</code>、<code>github-dark</code> 等。</li><li><code>label</code>：设置在 GitHub Issue 中显示的标签。</li></ul><p><code>utterances</code> 需要的是 HTTPS 格式的仓库地址，你只需提供 GitHub 用户名和仓库名的组合，形如 <code>username/repo</code></p><h3 id="4-部署测试"><a href="#4-部署测试" class="headerlink" title="4.部署测试"></a>4.部署测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure><p>看到以下内容 即为配置成功</p><img src="comment.png" class="custom-img" /><blockquote><p>如果有些页面没有出现此评论插件可以在文章开头手动打开也可以多刷新刷新</p></blockquote><img src="comm.png" class="custom-img" /><p>如果有人评论了 就会看仓库的 issues 里面看到</p><img src="cs.png" class="custom-img" /><p>然后在 issues 里面可以引用回复</p><img src="reply.png" class="custom-img" />]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo-theme-fluid</title>
    <link href="/huyanqun.github.io/2024/10/09/hexo-theme-fluid/"/>
    <url>/huyanqun.github.io/2024/10/09/hexo-theme-fluid/</url>
    
    <content type="html"><![CDATA[<p>一款 Material Design 风格的主题</p><h3 id="主题简介"><a href="#主题简介" class="headerlink" title="主题简介"></a>主题简介</h3><p>Fluid 是基于 Hexo 的一款 Material Design 风格的主题，由 <a href="https://github.com/fluid-dev">Fluid-dev</a>负责开发与维护。</p><p>主题 GitHub: <a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></p><p>预览网站：<a href="https://hexo.fluid-dev.com/">Fluid’s blog</a> <a href="https://zkqiang.cn/">zkqiang’s blog</a></p><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><p>1.获取主题</p><p>Hexo 5.0.0 版本以上，推荐通过 npm 直接安装，进入博客目录执行命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>2.指定主题</p><p>修改 Hexo 博客目录中的 <code>_config.yml</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">theme: fluid  <span class="hljs-comment"># 指定主题</span><br><br>language: zh-CN  <span class="hljs-comment"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><p>3.创建「关于页」</p><p>首次使用主题的「关于页」需要手动创建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page about<br></code></pre></td></tr></table></figure><p>创建成功后，编辑博客目录下 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性。</p><p>修改后的文件示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">---<br>title: about<br><span class="hljs-built_in">date</span>: 2024-10-09 13:48:21<br>layout: about<br>---<br><br>这里写关于页的正文，支持 Markdown, HTML<br></code></pre></td></tr></table></figure><blockquote><p>WARNING</p><p><code>layout: about</code> 必须存在，并且不能修改成其他值，否则不会显示头像等样式。</p></blockquote><h3 id="启动查看"><a href="#启动查看" class="headerlink" title="启动查看"></a>启动查看</h3><p>1.清理 Hexo 生成的缓存文件和静态文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br></code></pre></td></tr></table></figure><p>2.生成静态网页文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate<br><span class="hljs-comment"># or</span><br>hexo g<br></code></pre></td></tr></table></figure><p>3.部署生成的静态网页到远程服务器或托管服务 (如 GitHub Pages)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo deploy<br><span class="hljs-comment"># or</span><br>hexo d<br></code></pre></td></tr></table></figure><p>4.启动一个本地服务器，便于在本地预览生成的网站</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br><span class="hljs-comment"># or</span><br>hexo s<br></code></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>1.顶部菜单背景色</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">navbar_bg_color: <span class="hljs-string">&quot;#2f4154&quot;</span><br>navbar_bg_color_dark: <span class="hljs-string">&quot;#1f3144&quot;</span><br></code></pre></td></tr></table></figure><p>2.导航栏左侧的标题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">blog_title: <span class="hljs-string">&quot;Fluid&quot;</span><br></code></pre></td></tr></table></figure><p>3.导航栏菜单，可自行增减</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">menu:<br>  - &#123; key: <span class="hljs-string">&quot;home&quot;</span>, <span class="hljs-built_in">link</span>: <span class="hljs-string">&quot;/&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-home-fill&quot;</span> &#125;<br>  - &#123; key: <span class="hljs-string">&quot;archive&quot;</span>, <span class="hljs-built_in">link</span>: <span class="hljs-string">&quot;/archives/&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-archive-fill&quot;</span> &#125;<br>  - &#123; key: <span class="hljs-string">&quot;category&quot;</span>, <span class="hljs-built_in">link</span>: <span class="hljs-string">&quot;/categories/&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-category-fill&quot;</span> &#125;<br>  - &#123; key: <span class="hljs-string">&quot;tag&quot;</span>, <span class="hljs-built_in">link</span>: <span class="hljs-string">&quot;/tags/&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-tags-fill&quot;</span> &#125;<br>  - &#123; key: <span class="hljs-string">&quot;links&quot;</span>, <span class="hljs-built_in">link</span>: <span class="hljs-string">&quot;/links/&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-link-fill&quot;</span> &#125;<br>  - &#123; key: <span class="hljs-string">&quot;about&quot;</span>, <span class="hljs-built_in">link</span>: <span class="hljs-string">&quot;/about/&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-user-fill&quot;</span> &#125;<br></code></pre></td></tr></table></figure><p>4.Banner 头图 (每个页面有，按自己喜好配置)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">banner_img: /img/index.png<br></code></pre></td></tr></table></figure><p>5.首页副标题的独立设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">slogan:<br>   <span class="hljs-built_in">enable</span>: <span class="hljs-literal">true</span><br>   text: <span class="hljs-string">&quot;记录成长之路，分享生活点滴&quot;</span><br></code></pre></td></tr></table></figure><p>6.浏览量计数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">views:<br>  <span class="hljs-built_in">enable</span>: <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>7.在文章开头显示文章更新时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">updated:<br>    <span class="hljs-built_in">enable</span>: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>8.显示更新日期</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">update_date:<br>    <span class="hljs-built_in">enable</span>: <span class="hljs-literal">true</span><br>    format: <span class="hljs-string">&quot;LL&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/huyanqun.github.io/2024/10/08/hello-world/"/>
    <url>/huyanqun.github.io/2024/10/08/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="采用npm安装的主题怎么修改源代码"><a href="#采用npm安装的主题怎么修改源代码" class="headerlink" title="采用npm安装的主题怎么修改源代码"></a>采用npm安装的主题怎么修改源代码</h3><p>1.找到主题目录</p><p>通常，当你通过 npm 安装 Hexo 主题时，主题会被安装在 <code>node_modules</code> 目录下。首先，你需要找到这个目录。假设你的 Hexo 项目结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">your-hexo-project/    <span class="hljs-comment">#你的项目名</span><br>│<br>├── node_modules/<br>│   └── hexo-theme-name/<br>│<br>├── <span class="hljs-built_in">source</span>/<br>│<br>├── themes/<br>│   └── hexo-theme-name/<br>│<br>└── package.json<br><br></code></pre></td></tr></table></figure><p>在这个结构中，你的主题代码通常位于 <code>node_modules/hexo-theme-name</code>。</p><p>2.复制主题文件到你的 Hexo 项目中</p><p>由于 <code>node_modules</code> 中的文件可能会在更新主题时被覆盖，因此最好将主题复制到 Hexo 项目的 <code>themes</code> 目录中。这可以确保你的修改不会在未来的 npm 更新中丢失。</p><p>在命令行中，你可以使用以下命令（将 <code>hexo-theme-name</code> 替换为实际的主题名称）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在 Hexo 项目的根目录下</span><br><span class="hljs-built_in">cp</span> -r node_modules/hexo-theme-name themes/<br></code></pre></td></tr></table></figure><p>3.修改主题代码</p><p>进入到你复制的主题文件夹中，然后你可以自由修改代码。通常，主题的主要代码文件位于以下目录中：</p><ul><li>**layouts&#x2F;**：包含页面布局和模板文件（如 EJS、Pug 等）。</li><li>**source&#x2F;**：包含静态文件（如样式表、JavaScript、图片等）。</li><li><strong>_config.yml</strong>：主题的配置文件。</li></ul><p>根据你的需求，打开相应的文件进行修改。</p><p>4.使用自定义主题</p><p>在 Hexo 的 <code>_config.yml</code> 文件中，确保使用你复制的主题。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">theme: hexo-theme-name<br></code></pre></td></tr></table></figure><p>5.生成和查看效果</p><p>修改完主题源代码后，运行以下命令生成 Hexo 网站并启动本地服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo generate<br>hexo server<br></code></pre></td></tr></table></figure><p>然后在浏览器中访问 <code>http://localhost:4000</code>，查看你的修改效果。</p><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><p>在开启 <code>post_asset_folder: true</code> 的情况下。也就是新建一篇文章会创建一个同名的目录，图片资源直接放置在里面就可以了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;3419353.png&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="自定义样式"><a href="#自定义样式" class="headerlink" title="自定义样式"></a>自定义样式</h3><p>1.通过 CSS 全局样式修改</p><p>你可以在 <code>source/css/_custom.scss</code> 或 <code>source/css/style.css</code> 文件中添加全局的样式规则，应用于所有的图片，或者为特定的图片添加自定义样式</p><p>示例：为所有图片添加圆角、阴影和大小</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">img</span> &#123;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;         <span class="hljs-comment">/* 圆角 */</span><br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">4px</span> <span class="hljs-number">8px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.2</span>);  <span class="hljs-comment">/* 添加阴影 */</span><br>    <span class="hljs-attribute">display</span>: block; <span class="hljs-comment">/* 使图片成为块级元素 */</span><br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> auto; <span class="hljs-comment">/* 水平居中 */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果你只想给特定的图片添加样式，可以给 <code>&lt;img&gt;</code> 标签加上类名：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;new.png&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;custom-img&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>然后在 CSS 中针对这个类名添加样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.custom-img</span> &#123;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;         <span class="hljs-comment">/* 圆角 */</span><br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">4px</span> <span class="hljs-number">8px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.2</span>);  <span class="hljs-comment">/* 添加阴影 */</span><br>    <span class="hljs-attribute">display</span>: block; <span class="hljs-comment">/* 使图片成为块级元素 */</span><br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> auto; <span class="hljs-comment">/* 水平居中 */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>2.使用内联样式</p><p>如果你不想修改 CSS 文件，或者只是想为单张图片添加样式，可以直接在 HTML 中使用内联样式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;new.png&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border-radius: 15px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);display: block;margin: 10px auto;&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>前提是要确保你的 <code>_custom.scss</code> 或 <code>style.css</code> 被正确引入。Fluid 主题通常有一个自定义样式的地方，比如 <code>source/css/_custom.scss</code></p></blockquote><blockquote><p>你可以通过检查主题配置文件 <code>fluid_config.yml</code>或者<code>config.yml</code>，确保自定义样式文件被引入：</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 如果有启用自定义样式文件</span><br><span class="hljs-attr">custom_css:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/css/custom.css</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
