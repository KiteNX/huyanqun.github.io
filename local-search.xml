<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>基于NodeJs和Express搭建本地测试服务器</title>
    <link href="/huyanqun.github.io/2025/01/10/%E5%9F%BA%E4%BA%8ENodeJs%E5%92%8CExpress%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E6%B5%8B%E8%AF%95%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/huyanqun.github.io/2025/01/10/%E5%9F%BA%E4%BA%8ENodeJs%E5%92%8CExpress%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E6%B5%8B%E8%AF%95%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>搭建本地测试服务器是开发阶段的一个重要工具，能够解决跨域问题、模拟真实环境、方便调试与测试，并提高开发效率。尤其在前后端分离的项目中，它能够极大地优化开发体验，减少对远程环境的依赖</p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>创建一个目录 dictTest  在里面创建一个 server.js 文件 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// server.js </span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> &#123; createProxyMiddleware &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http-proxy-middleware&#x27;</span>);<br><span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cors&#x27;</span>);<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><span class="hljs-keyword">const</span> port = <span class="hljs-number">3000</span>;<br><br><span class="hljs-comment">// 使用 CORS 中间件，允许所有来源</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">cors</span>());<br><br><span class="hljs-comment">// 提供静态文件</span><br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>)));<br><br><span class="hljs-comment">// 设置代理，将 API 请求转发到实际的 API 服务器</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/prod-api&#x27;</span>, <span class="hljs-title function_">createProxyMiddleware</span>(&#123;<br>    <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://192.168.1.52:8888&#x27;</span>, <span class="hljs-comment">// API 服务器地址</span><br>    <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">pathRewrite</span>: &#123;<br>        <span class="hljs-string">&#x27;^/prod-api&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">// 去掉 API 路径前缀</span><br>    &#125;,<br>&#125;));<br><br><span class="hljs-comment">// 启动服务器</span><br>app.<span class="hljs-title function_">listen</span>(port, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Server is running at http://localhost:<span class="hljs-subst">$&#123;port&#125;</span>`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>CORS</strong>：</p><ul><li>使用了 <code>cors</code> 中间件，允许跨域请求，从而便于前端和后端本地开发时的跨域通信</li></ul><p><strong>静态文件服务</strong>：</p><ul><li>将 <code>dist</code> 目录中的内容暴露为静态资源目录，适用于打包后的前端文件部署</li></ul><p><strong>代理配置</strong>：</p><ul><li>使用 <code>http-proxy-middleware</code> 将 <code>/prod-api</code> 的请求代理到实际的后端 API 地址 <code>http://192.168.1.52:8888</code>，并将路径前缀 <code>/prod-api</code> 移除</li><li>适合在开发过程中避免跨域问题，同时将 API 请求指向实际的后端</li></ul><p><strong>服务器监听</strong>：</p><ul><li>监听在端口 <code>3000</code>，提供服务</li></ul><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>先初始化 创建一个 package.json 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm init<br></code></pre></td></tr></table></figure><p>安装 express 框架，path，http-proxy-middleware 中间价，cors 跨域</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install express path http-proxy-middleware cors<br></code></pre></td></tr></table></figure><img src="216.png" class="custom-img" /><p>查看 package.json 文件 启动项目</p><img src="112.png" class="custom-img" /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm run start<br><span class="hljs-comment"># or(可省略 run)</span><br>npm start<br><span class="hljs-comment"># or</span><br>node server.js<br></code></pre></td></tr></table></figure><blockquote><p>把项目打包之后生成的 dist 文件夹 放置进来</p><p>看到打印的路径代表启动成功</p></blockquote><img src="122.png" class="custom-img" /><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><img src="128.png" class="custom-img" />]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Echarts图表使用</title>
    <link href="/huyanqun.github.io/2025/01/07/Echarts%E5%9B%BE%E8%A1%A8%E4%BD%BF%E7%94%A8/"/>
    <url>/huyanqun.github.io/2025/01/07/Echarts%E5%9B%BE%E8%A1%A8%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>ECharts 是一个基于 JavaScript 的开源可视化图表库，广泛应用于数据可视化，支持多种类型的图表和高度定制化的选项。通常在前端开发中，ECharts 被用于创建各种交互式数据图表，如折线图、柱状图、饼图、雷达图等</p><p>文档：<a href="https://echarts.apache.org/zh/index.html">Apache ECharts</a></p><img src="135.png" class="custom-img" /><h3 id="在首页展示图表"><a href="#在首页展示图表" class="headerlink" title="在首页展示图表"></a>在首页展示图表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- src\views\dashboard\index.vue --&gt;<br>&lt;template&gt;<br>  &lt;div class=&quot;dashboard-container&quot;&gt;<br>    &lt;!-- Echarts 图表 --&gt;<br>    &lt;el-row :gutter=&quot;10&quot; class=&quot;mt-3&quot;&gt;<br>      &lt;el-col<br>        :xs=&quot;24&quot;<br>        :sm=&quot;12&quot;<br>        :lg=&quot;12&quot;<br>        class=&quot;mb-2&quot;<br>        v-for=&quot;item in chartData&quot;<br>        :key=&quot;item&quot;<br>      &gt;<br>        &lt;component<br>          :is=&quot;chartComponent(item)&quot;<br>          :id=&quot;item&quot;<br>          height=&quot;400px&quot;<br>          width=&quot;100%&quot;<br>          class=&quot;bg-[var(--el-bg-color-overlay)]&quot;<br>        /&gt;<br>      &lt;/el-col&gt;<br>    &lt;/el-row&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &quot;./custom-element-ui.scss&quot;;<br>defineOptions(&#123;<br>  name: &quot;Dashboard&quot;,<br>  inheritAttrs: false,<br>&#125;);<br><br>// 图表数据<br>const chartData = ref([&quot;Charts&quot;, &quot;AnnualCharts&quot;]);<br>const chartComponent = (item: string) =&gt; &#123;<br>  return defineAsyncComponent(() =&gt; import(`./components/$&#123;item&#125;.vue`));<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>目录结构</p><img src="125.png" class="custom-img" /><p>效果图</p><img src="124.png" class="custom-img" /><h3 id="收入支出统计图"><a href="#收入支出统计图" class="headerlink" title="收入支出统计图"></a>收入支出统计图</h3><h4 id="月度"><a href="#月度" class="headerlink" title="月度"></a>月度</h4><p>示例代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- src\views\dashboard\components\Charts.vue --&gt;<br>&lt;template&gt;<br>  &lt;el-card&gt;<br>    &lt;template #header&gt;<br>      &lt;div class=&quot;title&quot;&gt;<br>        月度统计<br>        &lt;el-tooltip effect=&quot;dark&quot; content=&quot;点击试试下载&quot; placement=&quot;bottom&quot;&gt;<br>          &lt;i-ep-download class=&quot;download&quot; @click=&quot;downloadEchart&quot; /&gt;<br>        &lt;/el-tooltip&gt;<br>      &lt;/div&gt;<br>    &lt;/template&gt;<br>    &lt;!-- 图表容器，使用传入的 props 设置 id、类名、宽度和高度 --&gt;<br>    &lt;div :id=&quot;id&quot; :class=&quot;className&quot; :style=&quot;&#123; height, width &#125;&quot;&gt;&lt;/div&gt;<br>  &lt;/el-card&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import ExpensesAPI from &quot;@/api/expenses&quot;;<br>import * as echarts from &quot;echarts&quot;;<br>import &#123; ref, onMounted, onActivated, markRaw &#125; from &quot;vue&quot;;<br><br>// 定义组件的 props 默认值和类型检查<br>const props = defineProps(&#123;<br>  id: &#123;<br>    type: String,<br>    default: &quot;Charts&quot;, // 默认图表 ID<br>  &#125;,<br>  className: &#123;<br>    type: String,<br>    default: &quot;&quot;, // 默认类名为空字符串<br>  &#125;,<br>  width: &#123;<br>    type: String,<br>    default: &quot;200px&quot;,<br>    required: true, // 宽度是必填项<br>  &#125;,<br>  height: &#123;<br>    type: String,<br>    default: &quot;200px&quot;,<br>    required: true, // 高度是必填项<br>  &#125;,<br>&#125;);<br>// 初始化图表配置选项<br>const options = &#123;<br>  legend: &#123;<br>    data: [&quot;收入&quot;, &quot;支出&quot;], // 图例数据<br>  &#125;,<br>  tooltip: &#123;<br>    trigger: &quot;axis&quot;, // 提示框触发方式<br>    axisPointer: &#123;<br>      type: &quot;shadow&quot;, // 坐标轴指示器类型<br>    &#125;,<br>  &#125;,<br>  dataset: &#123;<br>    source: [], // 数据源，初始为空数组<br>  &#125;,<br>  xAxis: &#123;<br>    type: &quot;category&quot;, // 类目轴 ，x 轴<br>    // name: &quot;月份&quot;,<br>    nameLocation: &quot;middle&quot;, // 名称位置<br>    nameGap: 25, // 名称与轴线之间的距离<br>  &#125;,<br>  yAxis: &#123;<br>    type: &quot;value&quot;, // 数值轴 ，y 轴<br>    // name: &quot;金额&quot;,<br>    nameLocation: &quot;middle&quot;, // 名称位置<br>    nameGap: 35, // 名称与轴线之间的距离<br>  &#125;,<br>  series: [<br>    &#123;<br>      name: &quot;收入&quot;, // 系列名称<br>      type: &quot;bar&quot;, // 柱状图类型<br>      itemStyle: &#123;<br>        color: &quot;green&quot;, // 收入柱子的颜色<br>      &#125;,<br>    &#125;,<br>    &#123;<br>      name: &quot;支出&quot;,<br>      type: &quot;bar&quot;,<br>      itemStyle: &#123;<br>        color: &quot;blue&quot;, // 支出柱子的颜色<br>      &#125;,<br>    &#125;,<br>  ],<br>&#125;;<br>// 创建一个响应式的 chart 变量，用于存储 ECharts 实例<br>const chart = ref&lt;any&gt;(null);<br>// 当组件挂载时初始化图表<br>onMounted(() =&gt; &#123;<br>  // 初始化 ECharts 实例，并将其标记为原始对象以避免 Vue 的响应式系统干扰<br>  chart.value = markRaw(<br>    echarts.init(document.getElementById(props.id) as HTMLDivElement)<br>  );<br>  // 设置图表的初始配置选项<br>  chart.value.setOption(options);<br>  // 监听窗口大小变化事件，调整图表大小<br>  window.addEventListener(&quot;resize&quot;, () =&gt; &#123;<br>    chart.value.resize();<br>  &#125;);<br>  // 获取月度统计数据并更新图表<br>  monthStatistics();<br>&#125;);<br>// 当组件激活时调整图表大小<br>onActivated(() =&gt; &#123;<br>  if (chart.value) &#123;<br>    chart.value.resize();<br>  &#125;<br>&#125;);<br>// 异步函数，用于获取月度统计数据并更新图表数据源<br>const monthStatistics = async () =&gt; &#123;<br>  try &#123;<br>    // 调用 API 获取月度统计数据<br>    const res: any = await ExpensesAPI.monthStatistics();<br>    // 定义月份数组<br>    const months = [<br>      &quot;1月&quot;,<br>      &quot;2月&quot;,<br>      &quot;3月&quot;,<br>      &quot;4月&quot;,<br>      &quot;5月&quot;,<br>      &quot;6月&quot;,<br>      &quot;7月&quot;,<br>      &quot;8月&quot;,<br>      &quot;9月&quot;,<br>      &quot;10月&quot;,<br>      &quot;11月&quot;,<br>      &quot;12月&quot;,<br>    ];<br>    // 根据 API 返回的数据生成新的数据源<br>    const sourceData = months.map((month, index) =&gt; &#123;<br>      const data = res.find((item: any) =&gt; item.month === index + 1);<br>      return &#123;<br>        month,<br>        收入: data ? data.totalIncome : 0, // 如果有数据则取收入，否则为 0<br>        支出: data ? data.totalExpense : 0, // 如果有数据则取支出，否则为 0<br>      &#125;;<br>    &#125;);<br>    // 更新图表的数据源<br>    chart.value.setOption(&#123;<br>      dataset: &#123;<br>        source: sourceData,<br>      &#125;,<br>    &#125;);<br>  &#125; catch (error) &#123;<br>    console.error(&quot;获取月度统计数据失败&quot;, error);<br>  &#125;<br>&#125;;<br><br>const downloadEchart = () =&gt; &#123;<br>  // 获取画布图表地址信息<br>  const img = new Image();<br>  img.src = chart.value.getDataURL(&#123;<br>    type: &quot;png&quot;,<br>    pixelRatio: 1,<br>    backgroundColor: &quot;#fff&quot;,<br>  &#125;);<br>  // 当图片加载完成后，生成 URL 并下载<br>  img.onload = () =&gt; &#123;<br>    const canvas = document.createElement(&quot;canvas&quot;);<br>    canvas.width = img.width;<br>    canvas.height = img.height;<br>    const ctx = canvas.getContext(&quot;2d&quot;);<br>    if (ctx) &#123;<br>      ctx.drawImage(img, 0, 0, img.width, img.height);<br>      const link = document.createElement(&quot;a&quot;);<br>      link.download = `月度统计.png`;<br>      link.href = canvas.toDataURL(&quot;image/png&quot;, 0.9);<br>      document.body.appendChild(link);<br>      link.click();<br>      link.remove();<br>    &#125;<br>  &#125;;<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;scss&quot; scoped&gt;<br>.title &#123;<br>  display: flex;<br>  justify-content: space-between;<br><br>  .download &#123;<br>    cursor: pointer;<br><br>    &amp;:hover &#123;<br>      color: #409eff;<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>接口返回数据结构</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>  <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;month&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;totalIncome&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2222</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;totalExpense&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">222</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;month&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;totalIncome&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3333</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;totalExpense&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">444</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  ...<br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>图表的源数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>  <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;month&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1月&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;收入&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2222</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;支出&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">222</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;month&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2月&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;收入&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3333</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;支出&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">444</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  ...<br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><blockquote><p>确保图表x轴显示月份，y轴显示金额值</p></blockquote><p>效果图</p><img src="131.png" class="custom-img" /><h4 id="年度"><a href="#年度" class="headerlink" title="年度"></a>年度</h4><p>示例代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- src\views\dashboard\components\AnnualCharts.vue --&gt;<br>&lt;template&gt;<br>  &lt;el-card&gt;<br>    &lt;template #header&gt;<br>      &lt;div class=&quot;title&quot;&gt;<br>        年度统计<br>        &lt;el-tooltip effect=&quot;dark&quot; content=&quot;点击试试下载&quot; placement=&quot;bottom&quot;&gt;<br>          &lt;i-ep-download class=&quot;download&quot; @click=&quot;downloadEchart&quot; /&gt;<br>        &lt;/el-tooltip&gt;<br>      &lt;/div&gt;<br>    &lt;/template&gt;<br><br>    &lt;div :id=&quot;id&quot; :class=&quot;className&quot; :style=&quot;&#123; height, width &#125;&quot;&gt;&lt;/div&gt;<br>  &lt;/el-card&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import ExpensesAPI from &quot;@/api/expenses&quot;;<br>import * as echarts from &quot;echarts&quot;;<br>import &#123; ref, onMounted, onActivated, markRaw &#125; from &quot;vue&quot;;<br><br>const props = defineProps(&#123;<br>  id: &#123;<br>    type: String,<br>    default: &quot;AnnualCharts&quot;,<br>  &#125;,<br>  className: &#123;<br>    type: String,<br>    default: &quot;&quot;,<br>  &#125;,<br>  width: &#123;<br>    type: String,<br>    default: &quot;200px&quot;,<br>    required: true,<br>  &#125;,<br>  height: &#123;<br>    type: String,<br>    default: &quot;200px&quot;,<br>    required: true,<br>  &#125;,<br>&#125;);<br><br>const currentYear = new Date().getFullYear().toString();<br>// const years = [&quot;2021&quot;, &quot;2022&quot;, &quot;2023&quot;, &quot;2024&quot;, &quot;2025&quot;];<br>let years: string[] = [];<br>// const defaultYearIndex =<br>//   years.indexOf(currentYear) !== -1 ? years.indexOf(currentYear) : 0;<br>let defaultYearIndex = 0; // 默认选中第一个年份<br><br>const options = &#123;<br>  legend: &#123;<br>    data: [&quot;收入&quot;, &quot;支出&quot;],<br>  &#125;,<br>  tooltip: &#123;<br>    trigger: &quot;axis&quot;,<br>    showContent: true,<br>  &#125;,<br>  dataset: &#123;<br>    source: [],<br>  &#125;,<br>  xAxis: &#123;<br>    type: &quot;category&quot;,<br>    data: [] as string[], // 动态设置 xAxis 数据<br>  &#125;,<br>  yAxis: &#123; gridIndex: 0 &#125;,<br>  grid: &#123; top: &quot;55%&quot; &#125;,<br>  series: [<br>    &#123;<br>      type: &quot;line&quot;,<br>      smooth: true,<br>      seriesLayoutBy: &quot;row&quot;,<br>      emphasis: &#123; focus: &quot;series&quot; &#125;,<br>      itemStyle: &#123;<br>        color: &quot;green&quot;,<br>      &#125;,<br>    &#125;,<br>    &#123;<br>      type: &quot;line&quot;,<br>      smooth: true,<br>      seriesLayoutBy: &quot;row&quot;,<br>      emphasis: &#123; focus: &quot;series&quot; &#125;,<br>      itemStyle: &#123;<br>        color: &quot;blue&quot;,<br>      &#125;,<br>    &#125;,<br>    &#123;<br>      type: &quot;pie&quot;,<br>      id: &quot;pie&quot;,<br>      radius: &quot;30%&quot;,<br>      center: [&quot;50%&quot;, &quot;25%&quot;],<br>      emphasis: &#123;<br>        focus: &quot;self&quot;,<br>      &#125;,<br>      label: &#123;<br>        formatter: `&#123;b&#125;: &#123;@$&#123;years[defaultYearIndex]&#125;&#125; (&#123;d&#125;%)`,<br>      &#125;,<br>      encode: &#123;<br>        itemName: &quot;product&quot;,<br>        value: defaultYearIndex + 1,<br>        tooltip: defaultYearIndex + 1,<br>      &#125;,<br>      itemStyle: &#123;<br>        color: function (params: any) &#123;<br>          if (params.name === &quot;收入&quot;) &#123;<br>            return &quot;green&quot;;<br>          &#125; else if (params.name === &quot;支出&quot;) &#123;<br>            return &quot;blue&quot;;<br>          &#125;<br>          return &quot;#ccc&quot;; // 默认颜色<br>        &#125;,<br>      &#125;,<br>    &#125;,<br>  ],<br>&#125;;<br><br>const chart = ref&lt;any&gt;(&quot;&quot;);<br><br>// 异步函数，用于获取年度统计数据并更新图表数据源<br>const annualStatistics = async () =&gt; &#123;<br>  try &#123;<br>    // 调用 API 获取年度统计数据<br>    const res: any = await ExpensesAPI.annualStatistics();<br>    // console.log(&quot;获取到的数据:&quot;, res);<br>    // 生成年份数组<br>    const years = res.map((item: any) =&gt; item.year.toString());<br>    // console.log(&quot;生成的年份数组:&quot;, years); <br>    // 确保年份按升序排列<br>    years.sort((a: string, b: string) =&gt; parseInt(a) - parseInt(b));<br><br>    // 更新默认选中的年份索引<br>    defaultYearIndex =<br>      years.indexOf(currentYear) !== -1 ? years.indexOf(currentYear) : 0;<br><br>    // 生成数据源<br>    const sourceData = [<br>      [&quot;product&quot;, ...years],<br>      [<br>        &quot;收入&quot;,<br>        ...years.map((year: string) =&gt; &#123;<br>          const data = res.find((item: any) =&gt; item.year.toString() === year);<br>          return data ? data.totalIncome : 0;<br>        &#125;),<br>      ],<br>      [<br>        &quot;支出&quot;,<br>        ...years.map((year: string) =&gt; &#123;<br>          const data = res.find((item: any) =&gt; item.year.toString() === year);<br>          return data ? data.totalExpense : 0;<br>        &#125;),<br>      ],<br>    ];<br><br>    // console.log(&quot;处理后的数据:&quot;, sourceData);<br><br>    // 初始化图表<br>    chart.value = markRaw(<br>      echarts.init(document.getElementById(props.id) as HTMLDivElement)<br>    );<br><br>    // 设置默认选中的年份<br>    const defaultMarkLineData = [<br>      &#123;<br>        xAxis: defaultYearIndex,<br>        lineStyle: &#123;<br>          color: &quot;red&quot;,<br>          type: &quot;dashed&quot;,<br>        &#125;,<br>        label: &#123;<br>          show: false, // 隐藏标签<br>        &#125;,<br>      &#125;,<br>    ];<br><br>    // 更新图表<br>    chart.value.setOption(&#123;<br>      ...options,<br>      xAxis: &#123;<br>        type: &quot;category&quot;,<br>        data: years, // 动态设置 xAxis 数据<br>      &#125;,<br>      dataset: &#123;<br>        source: sourceData,<br>      &#125;,<br>      series: [<br>        ...options.series.slice(0, 2).map((series, index) =&gt; (&#123;<br>          ...series,<br>          markLine: &#123;<br>            data: defaultMarkLineData,<br>          &#125;,<br>        &#125;)),<br>        // options.series[2],<br>        &#123;<br>          ...options.series[2],<br>          label: &#123;<br>            formatter: `&#123;b&#125;: &#123;@$&#123;years[defaultYearIndex]&#125;&#125; (&#123;d&#125;%)`,<br>          &#125;,<br>          encode: &#123;<br>            itemName: &quot;product&quot;,<br>            value: defaultYearIndex + 1,<br>            tooltip: defaultYearIndex + 1,<br>          &#125;,<br>        &#125;,<br>      ],<br>    &#125;);<br><br>    // 监听 resize<br>    window.addEventListener(&quot;resize&quot;, () =&gt; &#123;<br>      chart.value?.resize();<br>    &#125;);<br><br>    // 监听 updateAxisPointer<br>    chart.value.on(&quot;updateAxisPointer&quot;, (event: any) =&gt; &#123;<br>      const xAxisInfo = event.axesInfo[0];<br>      if (xAxisInfo) &#123;<br>        const dimension = xAxisInfo.value + 1;<br>        // 检查 dimension 是否在有效范围内<br>        if (dimension &lt; 1 || dimension &gt; years.length) &#123;<br>          console.error(&quot;索引超出有效范围&quot;);<br>          return;<br>        &#125;<br>        const markLineData = [<br>          &#123;<br>            xAxis: xAxisInfo.value,<br>            lineStyle: &#123;<br>              color: &quot;red&quot;,<br>              type: &quot;dashed&quot;,<br>            &#125;,<br>            label: &#123;<br>              show: false, // 隐藏标签<br>            &#125;,<br>          &#125;,<br>        ];<br><br>        chart.value.setOption(&#123;<br>          series: [<br>            ...options.series.slice(0, 2).map((series, index) =&gt; (&#123;<br>              ...series,<br>              markLine: &#123;<br>                data: markLineData,<br>              &#125;,<br>            &#125;)),<br>            &#123;<br>              id: &quot;pie&quot;,<br>              label: &#123;<br>                formatter: `&#123;b&#125;: &#123;@$&#123;years[dimension - 1]&#125;&#125; (&#123;d&#125;%)`,<br>              &#125;,<br>              encode: &#123;<br>                value: dimension,<br>                tooltip: dimension,<br>              &#125;,<br>              itemStyle: &#123;<br>                color: function (params: any) &#123;<br>                  if (params.name === &quot;收入&quot;) &#123;<br>                    return &quot;green&quot;;<br>                  &#125; else if (params.name === &quot;支出&quot;) &#123;<br>                    return &quot;blue&quot;;<br>                  &#125;<br>                  return &quot;#ccc&quot;; // 默认颜色<br>                &#125;,<br>              &#125;,<br>            &#125;,<br>          ],<br>        &#125;);<br>      &#125;<br>    &#125;);<br>  &#125; catch (error) &#123;<br>    console.error(&quot;获取统计数据失败&quot;, error);<br>  &#125;<br>&#125;;<br><br>onMounted(() =&gt; &#123;<br>  // 调用 annualStatistics 函数获取数据并更新图表<br>  annualStatistics();<br>&#125;);<br><br>onActivated(() =&gt; &#123;<br>  if (chart.value) &#123;<br>    chart.value.resize();<br>  &#125;<br>&#125;);<br><br>const downloadEchart = () =&gt; &#123;<br>  // 获取画布图表地址信息<br>  const img = new Image();<br>  img.src = chart.value.getDataURL(&#123;<br>    type: &quot;png&quot;,<br>    pixelRatio: 1,<br>    backgroundColor: &quot;#fff&quot;,<br>  &#125;);<br>  // 当图片加载完成后，生成 URL 并下载<br>  img.onload = () =&gt; &#123;<br>    const canvas = document.createElement(&quot;canvas&quot;);<br>    canvas.width = img.width;<br>    canvas.height = img.height;<br>    const ctx = canvas.getContext(&quot;2d&quot;);<br>    if (ctx) &#123;<br>      ctx.drawImage(img, 0, 0, img.width, img.height);<br>      const link = document.createElement(&quot;a&quot;);<br>      link.download = `年度统计.png`;<br>      link.href = canvas.toDataURL(&quot;image/png&quot;, 0.9);<br>      document.body.appendChild(link);<br>      link.click();<br>      link.remove();<br>    &#125;<br>  &#125;;<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;scss&quot; scoped&gt;<br>.title &#123;<br>  display: flex;<br>  justify-content: space-between;<br><br>  .download &#123;<br>    cursor: pointer;<br><br>    &amp;:hover &#123;<br>      color: #409eff;<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><p>接口返回的数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;year&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2025</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;totalIncome&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2666</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;totalExpense&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1466</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;year&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2024</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;totalIncome&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;totalExpense&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;year&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2023</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;totalIncome&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;totalExpense&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  ...<br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>图表的源数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;product&quot;</span><span class="hljs-punctuation">,</span><br>        ...<br>        <span class="hljs-string">&quot;2023&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;2024&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;2025&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;收入&quot;</span><span class="hljs-punctuation">,</span><br>        ...<br>        <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-number">2666</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;支出&quot;</span><span class="hljs-punctuation">,</span><br>        ...<br>        <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-number">1466</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><blockquote><p>x轴的年份是后端数据接口返回的 跟月度不一样 月度不管是那一年都是那几个月 但是年度会改变 所以年份要获取后端的数据</p></blockquote><p>效果图</p><img src="151.png" class="custom-img" /><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>每个 Echarts 图表 都有自己定义的源数据 <code>图表不一样 源数据就不一样</code> 虽然接口返回的数据格式都是一样的 但是需要处理成图表源数据的格式才可以 如果使用同一个图表那么只要改变一下接口 获取相应的数据在渲染就可以 比如 季度 就采用了和月度一样的图表 </p><p>【示例】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 异步函数，用于获取季度统计数据并更新图表数据源</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">quarterStatistics</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 调用 API 获取月度统计数据</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">res</span>: any = <span class="hljs-keyword">await</span> <span class="hljs-title class_">ExpensesAPI</span>.<span class="hljs-title function_">quarterStatistics</span>();<br>    <span class="hljs-comment">// 定义季度数组</span><br>    <span class="hljs-keyword">const</span> quarters = [<br>      <span class="hljs-string">&quot;第一季度&quot;</span>,<br>      <span class="hljs-string">&quot;第二季度&quot;</span>,<br>      <span class="hljs-string">&quot;第三季度&quot;</span>,<br>      <span class="hljs-string">&quot;第四季度&quot;</span>,<br>    ];<br>    <span class="hljs-comment">// 根据 API 返回的数据生成新的数据源</span><br>    <span class="hljs-keyword">const</span> sourceData = quarters.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">quarter, index</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> data = res.<span class="hljs-title function_">find</span>(<span class="hljs-function">(<span class="hljs-params">item: any</span>) =&gt;</span> item.<span class="hljs-property">quarter</span> === index + <span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">return</span> &#123;<br>        quarter,<br>        收入: data ? data.<span class="hljs-property">totalIncome</span> : <span class="hljs-number">0</span>, <span class="hljs-comment">// 如果有数据则取收入，否则为 0</span><br>        支出: data ? data.<span class="hljs-property">totalExpense</span> : <span class="hljs-number">0</span>, <span class="hljs-comment">// 如果有数据则取支出，否则为 0</span><br>      &#125;;<br>    &#125;);<br>    <span class="hljs-comment">// 更新图表的数据源</span><br>    chart.<span class="hljs-property">value</span>.<span class="hljs-title function_">setOption</span>(&#123;<br>      <span class="hljs-attr">dataset</span>: &#123;<br>        <span class="hljs-attr">source</span>: sourceData,<br>      &#125;,<br>    &#125;);<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;获取统计数据失败&quot;</span>, error);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>只要把 月度的方法 monthStatistics 换成 季度的 quarterStatistics 就可以了 当前了 这样要保证后端返回的数据格式也要跟月度是一样的</p></blockquote><p>效果图</p><img src="225.png" class="custom-img" />]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据可视化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>el-date-picker隐藏年，仅显示月日</title>
    <link href="/huyanqun.github.io/2025/01/03/el-date-picker%E9%9A%90%E8%97%8F%E5%B9%B4%EF%BC%8C%E4%BB%85%E6%98%BE%E7%A4%BA%E6%9C%88%E6%97%A5/"/>
    <url>/huyanqun.github.io/2025/01/03/el-date-picker%E9%9A%90%E8%97%8F%E5%B9%B4%EF%BC%8C%E4%BB%85%E6%98%BE%E7%A4%BA%E6%9C%88%E6%97%A5/</url>
    
    <content type="html"><![CDATA[<p>在开发中，用户需求想要一个<strong>日期选择器</strong>，且 <code>仅选择月日 </code>，在 element 中并没有直接的月日选择器供使用,都是直接年月日的形式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html">// 正常显示年月日<br><span class="hljs-tag">&lt;<span class="hljs-name">el-date-picker</span></span><br><span class="hljs-tag">    <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;form.value1&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;date&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请选择日期&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">format</span>=<span class="hljs-string">&quot;MM-DD&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">value-format</span>=<span class="hljs-string">&quot;MM-DD&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%;&quot;</span></span><br><span class="hljs-tag"> /&gt;</span> <br></code></pre></td></tr></table></figure><img src="937.png" class="custom-img" /><img src="142.png" class="custom-img" /><p>通过上面的图片看出，只要将<code>前一年,后一年,年份</code>按钮，将他隐藏，即可仅选择月日</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html">// 添加 popper-class=&quot;picker-dateNoneYear&quot; <br><span class="hljs-tag">&lt;<span class="hljs-name">el-date-picker</span></span><br><span class="hljs-tag">   <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;form.value2&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;date&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请选择日期&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">popper-class</span>=<span class="hljs-string">&quot;picker-dateNoneYear&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">format</span>=<span class="hljs-string">&quot;MM-DD&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">value-format</span>=<span class="hljs-string">&quot;MM-DD&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%;&quot;</span></span><br><span class="hljs-tag">/&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>下拉框节点不在当前页面，必须写在 <code>不加 scoped 的 style 标签</code> 里面，否则不生效</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&lt;style lang=<span class="hljs-string">&quot;scss&quot;</span>&gt;<br><span class="hljs-selector-class">.picker-dateNoneYear</span> &#123;<br>  <span class="hljs-selector-class">.el-date-picker__header</span> &#123;<br>    <span class="hljs-selector-class">.el-date-picker__prev-btn</span> &#123;<br>      &gt; <span class="hljs-selector-tag">button</span><span class="hljs-selector-pseudo">:first-child</span> &#123;<br>        <span class="hljs-attribute">display</span>: none;<br>      &#125;<br>    &#125;<br>    <span class="hljs-selector-class">.el-date-picker__next-btn</span> &#123;<br>      &gt; <span class="hljs-selector-tag">button</span><span class="hljs-selector-pseudo">:last-child</span> &#123;<br>        <span class="hljs-attribute">display</span>: none;<br>      &#125;<br>    &#125;<br>    &gt; <span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-attribute">display</span>: none;<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><img src="182.png" class="custom-img" />]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue3-print-nb</title>
    <link href="/huyanqun.github.io/2025/01/03/vue3-print-nb/"/>
    <url>/huyanqun.github.io/2025/01/03/vue3-print-nb/</url>
    
    <content type="html"><![CDATA[<p>在 Vue3 中实现打印功能，可以使用 <strong>vue3-print-nb</strong> 插件，它提供了简单的指令来快速实现页面内容的打印，这个插件通过对 DOM 元素的操作和 CSS 样式的处理，轻松实现页面内容的打印功能</p><p>官方文档：<a href="https://www.npmjs.com/package/vue3-print-nb">https://www.npmjs.com/package/vue3-print-nb</a></p><h3 id="安装和使用"><a href="#安装和使用" class="headerlink" title="安装和使用"></a>安装和使用</h3><blockquote><p>当前示例以 Vue3 为例，如果要使用 Vue2 版本的就安装 <code>npm install vue-print-nb --save</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install vue3-print-nb --save<br></code></pre></td></tr></table></figure><p>在 <strong>main.ts</strong> 中导入并使用该插件</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-comment">// 导入打印插件</span><br><span class="hljs-keyword">import</span> print <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue3-print-nb&#x27;</span><br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)<br><br><span class="hljs-comment">// 打印</span><br>app.<span class="hljs-title function_">use</span>(print)<br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><p>可能会出现 ts 类型报错</p><blockquote><p>新建 vue3-print-nb.d.ts 文件</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">declare</span> <span class="hljs-variable language_">module</span> <span class="hljs-string">&quot;vue3-print-nb&quot;</span> &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title class_">Print</span>: <span class="hljs-built_in">any</span>;<br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Print</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用</p><blockquote><p>可以通过给元素添加 <strong>v-print</strong> 指令来绑定打印功能</p><p>其中 <strong>#print</strong> 是需要打印内容的 DOM 元素的 ID</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">v-print</span>=<span class="hljs-string">&quot;&#x27;#print&#x27;&quot;</span>&gt;</span> 打印 <span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div @click=&quot;showPrintFun(true)&quot;&gt;<br>        &lt;el-icon&gt;&lt;Printer /&gt;&lt;/el-icon&gt;<br>    &lt;/div&gt;<br>&lt;el-dialog v-model=&quot;showPrint&quot; title=&quot;打印预览&quot; width=&quot;800&quot;&gt;<br>      &lt;div class=&quot;print&quot; id=&quot;print&quot;&gt;<br>        &lt;div&gt;<br>          &lt;h2 class=&quot;printTitle&quot;&gt;标题&lt;/h2&gt;<br>          &lt;div class=&quot;printHeader&quot;&gt;<br>            &lt;div&gt;编号：xxx&lt;/div&gt;<br>            &lt;div&gt;提交时间：xxx&lt;/div&gt;<br>          &lt;/div&gt;<br>        &lt;/div&gt;<br>        &lt;table class=&quot;printTable&quot;&gt;<br>          &lt;tr&gt;<br>            &lt;th class=&quot;td-title&quot;&gt;申请人&lt;/th&gt;<br>            &lt;td&gt;xxx&lt;/td&gt;<br>          &lt;/tr&gt;<br>          &lt;tr&gt;<br>            &lt;th class=&quot;td-title&quot;&gt;申请原因&lt;/th&gt;<br>            &lt;td&gt;xxx&lt;/td&gt;<br>          &lt;/tr&gt;<br>          &lt;tr&gt;<br>            &lt;th class=&quot;td-title&quot;&gt;申请结果&lt;/th&gt;<br>            &lt;td&gt;xxx&lt;/td&gt;<br>          &lt;/tr&gt;<br>        &lt;/table&gt;<br>        &lt;div class=&quot;printFooter&quot;&gt;<br>          &lt;div&gt;打印人：xxx&lt;/div&gt;<br>          &lt;div style=&quot;text-align: right&quot;&gt;打印时间：xxx&lt;/div&gt;<br>        &lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;template #footer&gt;<br>        &lt;div class=&quot;dialog-footer&quot;&gt;<br>          &lt;el-button @click=&quot;showPrintFun(false)&quot;&gt;取消&lt;/el-button&gt;<br>          &lt;el-button type=&quot;primary&quot; v-print=&quot;&#x27;#print&#x27;&quot;&gt; 打印 &lt;/el-button&gt;<br>        &lt;/div&gt;<br>      &lt;/template&gt;<br>    &lt;/el-dialog&gt;<br>&lt;/template&gt;<br><br>&lt;script setup&gt;<br>// 管理打印窗口的按钮<br>const showPrint = ref(false);<br><br>// 打印模板<br>function showPrintFun(showP) &#123;<br>    showPrint.value = showP;<br>&#125;<br>&lt;/script&gt;      <br>&lt;style scoped&gt;<br>.print &#123;<br>  position: relative;<br>  width: 100%;<br>  padding: 20px 16px;<br>  font-family: &quot;宋体&quot;, SimSun, serif;<br>&#125;<br><br>.print .printTitle &#123;<br>  text-align: center;<br>&#125;<br><br>.print .printHeader &#123;<br>  margin-bottom: 20px;<br>  font-size: 16px;<br>&#125;<br><br>.print .printHeader &gt; div &#123;<br>  padding: 5px 0;<br>&#125;<br><br>.printTable &#123;<br>  width: 100%;<br>  font-size: 16px;<br>  border-collapse: collapse;<br><br>  /* padding: 2px; */<br>&#125;<br><br>.printTable tr th,<br>.printTable tr td &#123;<br>  padding: 5px 10px;<br>  text-align: left;<br>  border: 1px solid #464648;<br>&#125;<br><br>.printTable th &#123;<br>  background-color: #f2f2f2; /* 设置表头背景色 */<br>&#125;<br><br>.td-title &#123;<br>  width: 200px;<br>&#125;<br><br>.baseInfo &#123;<br>  display: flex;<br>  justify-content: space-between;<br>  padding: 16px 0;<br>&#125;<br><br>.printFooter &#123;<br>  margin-top: 20px;<br>  font-size: 16px;<br>&#125;<br><br>.printFooter &gt; div &#123;<br>  display: inline-block;<br>  width: 50%;<br>&#125;<br><br>.print-image &#123;<br>  position: absolute;<br>  top: 80px;<br>  right: 100px;<br>  z-index: 9999;<br>  width: 80px;<br>  height: 80px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><blockquote><p>当点击 <strong>打印</strong> 按钮时，将会打印 ID为 <strong>print</strong> 的 <strong>el-table</strong> 元素的内容</p></blockquote><img src="329.png" class="custom-img" /><img src="911.png" class="custom-img" />]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FileBrowser 私人网盘安装配置</title>
    <link href="/huyanqun.github.io/2024/12/19/FileBrowser-%E7%A7%81%E4%BA%BA%E7%BD%91%E7%9B%98%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <url>/huyanqun.github.io/2024/12/19/FileBrowser-%E7%A7%81%E4%BA%BA%E7%BD%91%E7%9B%98%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>File Browser 是一个基于 Web 的文件管理器。它可以使你随时随地的对文件进行基本的管理操作，如：创建（文件，文件夹）、删除、移动、复制等。它除了可以让你进行文件管理之外，还有一些其他的功能。它支持多个用户的管理，而且每个用户可以拥有自己可以访问的文件和权限。它还支持文件分享，就像网盘那样，你可以通过它来向你的朋友分享文件。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>File Browser 适用于全平台，任何操作系统都可以安装它，当然，<code>这里以 Linux 为主</code></p><p>手动下载：<a href="https://github.com/filebrowser/filebrowser/releases/latest">https://github.com/filebrowser/filebrowser/releases/latest</a></p><p>如果是手动下载的，那么要上传到 Linux 服务器上面 ，然后解压</p><p>直接下载：</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-comment"># 下载</span><br><span class="hljs-comment"># 这里下载 amd64(X86-64) 2.18.0 版本</span><br>wget https://github.com/filebrowser/filebrowser/releases/download/v2.<span class="hljs-number">18.0</span>/linux-amd64-filebrowser.tar.gz<br><span class="hljs-comment"># 解压</span><br><span class="hljs-comment"># 解压到当前目录下</span><br>tar -xvf linux-amd64-filebrowser.tar.gz<br><span class="hljs-comment"># 解压到你指定的目录，比如这里的 /opt/filebrowser</span><br>tar -xvf linux-amd64-filebrowser.tar.gz -C /opt/filebrowser<br><br><span class="hljs-comment"># or </span><br>curl -fsSL https://raw.githubusercontent.com/filebrowser/get/master/get.sh | bash<br><span class="hljs-comment"># 出现 curl: command not found 报错就是系统没有安装 curl，请先安装再来执行命令。</span><br><span class="hljs-comment"># Debian 系安装命令 apt install curl -y</span><br><span class="hljs-comment"># CentOS 系安装命令 yum install curl -y</span><br></code></pre></td></tr></table></figure><h3 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h3><p><strong>初始化：</strong>首先在 <code>/opt/filebrowser.db</code> 路径下（路径可以自行更改）创建数据库文件，并初始化 filebrowser 的配置。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift">filebrowser <span class="hljs-operator">-</span>d <span class="hljs-regexp">/opt/</span>filebrowser.db config <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><p><strong>设置：</strong>设置监听地址为 <code>0.0.0.0</code> ；监听端口为 <code>8088</code> **(这个端口可以自行更改，但是需要在服务器放行)**，默认8080；语言为中文</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">filebrowser -d <span class="hljs-string">/opt/filebrowser.db</span> config <span class="hljs-keyword">set</span> <span class="hljs-params">--address</span> 0.0.0.0 <span class="hljs-params">--port</span> 8088 <span class="hljs-params">--locale</span> zh-cn<br></code></pre></td></tr></table></figure><p><strong>添加用户：</strong>添加一个用户名为 <code>test</code> ，密码为 <code>123456</code> 的用户，并赋予该用户 <code>admin的权限</code>（用户名密码自行设定）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">filebrowser -d /opt/filebrowser.db <span class="hljs-built_in">users</span> add <span class="hljs-built_in">test</span> 123456 --perm.admin<br></code></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>通过浏览器打开 <code>http://IP:端口</code> (改为你的 IP 和端口)，出现以下界面表示 FileBrowser 安装成功</p><p>示例：<a href="http://192.168.1.1:8088/">http://192.168.10.1:8088</a></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">filebrowser</span> -d /<span class="hljs-meta">opt</span>/filebrowser.db<br></code></pre></td></tr></table></figure><img src="726.png" class="custom-img" /><p>登录 FileBrowser 后默认位于<strong>服务器根目录</strong>，你可以点击 [设置] → [用户管理] → 编辑当前用户→ 将目录范围改为你想要显示的文件夹，例如：&#x2F;opt→ 修改完成后点击最下方的保存即可</p><img src="350.png" class="custom-img" /><img src="442.png" class="custom-img" /><h3 id="创建-service-管理-FileBrowser-后台持续化运行"><a href="#创建-service-管理-FileBrowser-后台持续化运行" class="headerlink" title="创建 service 管理 FileBrowser 后台持续化运行"></a>创建 service 管理 FileBrowser 后台持续化运行</h3><blockquote><p>File Browser 默认是<strong>前台运行</strong></p></blockquote><p>可以简单使用直接 nohup：</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nsis">nohup filebrowser -c filebrowser.db &amp;<br><span class="hljs-comment"># or</span><br>nohup filebrowser -d /opt/filebrowser.db &gt;/dev/null <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> &amp;<br></code></pre></td></tr></table></figure><p>使用 <code> systemd</code>  让它后台运行（推荐）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>systemd<span class="hljs-regexp">/system/</span>filebrowser.service<br></code></pre></td></tr></table></figure><p>输入以下内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=FileBrowser<br><span class="hljs-attr">After</span>=network.target<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">ExecStart</span>=/usr/local/bin/filebrowser -d /opt/filebrowser.db<br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><p>重载 systemd 管理器配置，使 filebrowser.service 生效</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl daemon-reload</span><br></code></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-comment"># 运行</span><br><span class="hljs-params">system</span>ctl start filebrowser<br><span class="hljs-comment"># 重启</span><br><span class="hljs-params">system</span>ctl restart filebrowser<br><span class="hljs-comment"># 停止运行</span><br><span class="hljs-params">system</span>ctl stop filebrowser<br><span class="hljs-comment"># 开机启动</span><br><span class="hljs-params">system</span>ctl enable filebrowser<br><span class="hljs-comment"># 取消开机启动</span><br><span class="hljs-params">system</span>ctl disable filebrowser<br><span class="hljs-comment"># 查看运行状态</span><br><span class="hljs-params">system</span>ctl status filebrowser<br></code></pre></td></tr></table></figure><h3 id="域名访问"><a href="#域名访问" class="headerlink" title="域名访问"></a>域名访问</h3><p>如果 IP 已经绑定了域名，且已经申请了 SSL 证书，想开启 Https 访问</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-comment"># 证书文件路径：/opt/cert.pem</span><br><span class="hljs-comment"># 私钥文件路径：/opt/key.pem</span><br>filebrowser -d /opt/filebrowser.db config set --cert /opt/cert.pem --key /opt/key.pem<br></code></pre></td></tr></table></figure><h3 id="版本更新"><a href="#版本更新" class="headerlink" title="版本更新"></a>版本更新</h3><p>之前是 2.18.0 版本 现在使用最新版 2.31.2</p><p>可以手动下载之后上传服务器在解压</p><p>也可以直接下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载 filebrowser 版本 v2.31.2 的 tar.gz 文件</span><br>wget https://github.com/filebrowser/filebrowser/releases/download/v2.31.2/linux-amd64-filebrowser.tar.gz<br><br><span class="hljs-comment"># 解压</span><br>tar -xvzf linux-amd64-filebrowser.tar.gz<br><br><span class="hljs-comment"># 解压后，将解压出的 filebrowser 二进制文件替换系统中当前的版本。假设旧版本安装在 /usr/local/bin/</span><br><span class="hljs-comment"># 备份当前的 filebrowser 文件</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mv</span> /usr/local/bin/filebrowser /usr/local/bin/filebrowser.bak<br><br><span class="hljs-comment"># 移动新的文件到正确的目录</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mv</span> filebrowser /usr/local/bin/filebrowser<br><br><span class="hljs-comment"># 确保文件可执行</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> +x /usr/local/bin/filebrowser<br><br><span class="hljs-comment"># 检查版本以确保升级成功 </span><br>filebrowser version<br><br><span class="hljs-comment"># 重启</span><br><span class="hljs-built_in">sudo</span> systemctl restart filebrowser<br></code></pre></td></tr></table></figure><blockquote><p>再次访问的时候会发现版本已经更新完毕了</p></blockquote><img src="530.png" class="custom-img" /><h3 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h3><p>云服务器开放端口：</p><img src="330.png" class="custom-img" /><p>虚拟机开放端口：</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 允许http服务</span><br><span class="hljs-built_in">sudo</span> firewall-cmd --add-service=http --permanent <br><br><span class="hljs-comment"># 打开 8088 端口</span><br><span class="hljs-built_in">sudo</span> firewall-cmd --add-port=8088/tcp --permanent<br><br><span class="hljs-comment"># 再次查看端口的开放情况</span><br><span class="hljs-built_in">sudo</span> firewall-cmd --reload<br><span class="hljs-built_in">sudo</span> firewall-cmd --list-all<br></code></pre></td></tr></table></figure><ul><li><p>命令末尾的 <code>–permanent</code> 表示永久有效，不加这句的话重启后刚才开放的端口就又失效了</p></li><li><p>发现 services: 里出现了 http 服务，ports：里也出现了 8088 端口</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件管理工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue3-puzzle-vcode</title>
    <link href="/huyanqun.github.io/2024/12/16/vue3-puzzle-vcode/"/>
    <url>/huyanqun.github.io/2024/12/16/vue3-puzzle-vcode/</url>
    
    <content type="html"><![CDATA[<p><strong>Vue 纯前端</strong>实现滑块拼图验证码（基于Vue3的）</p><blockquote><p>滑块拼图这一块是纯前端的 不涉及后端 但是登录接口是需要后端的 </p></blockquote><p>官方文档：<a href="https://www.npmjs.com/package/vue3-puzzle-vcode?activeTab=readme">vue3-puzzle-vcode - npm</a></p><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install vue3-puzzle-vcode --save<br></code></pre></td></tr></table></figure><h3 id="登录示例"><a href="#登录示例" class="headerlink" title="登录示例"></a>登录示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;login&quot;&gt;<br>    &lt;div class=&quot;login-content&quot;&gt;<br>      &lt;div class=&quot;login-form&quot;&gt;<br>        &lt;el-form ref=&quot;loginFormRef&quot; :model=&quot;loginData&quot; :rules=&quot;loginRules&quot;&gt;<br>          &lt;div class=&quot;form-title&quot;&gt;<br>            &lt;h2&gt;登录&lt;/h2&gt;<br>          &lt;/div&gt;<br><br>          &lt;!-- 用户名 --&gt;<br>          &lt;el-form-item prop=&quot;username&quot;&gt;<br>            &lt;div class=&quot;input-wrapper&quot;&gt;<br>              &lt;el-icon class=&quot;mx-2&quot;&gt;<br>                &lt;User /&gt;<br>              &lt;/el-icon&gt;<br>              &lt;el-input<br>                ref=&quot;username&quot;<br>                v-model=&quot;loginData.username&quot;<br>                placeholder=&quot;请输入用户名&quot;<br>                name=&quot;username&quot;<br>                size=&quot;large&quot;<br>                class=&quot;h-[48px]&quot;<br>              /&gt;<br>            &lt;/div&gt;<br>          &lt;/el-form-item&gt;<br><br>          &lt;!-- 密码 --&gt;<br>          &lt;el-tooltip<br>            :visible=&quot;isCapslock&quot;<br>            content=&quot;大写锁定已打开&quot;<br>            placement=&quot;right&quot;<br>          &gt;<br>            &lt;el-form-item prop=&quot;password&quot;&gt;<br>              &lt;div class=&quot;input-wrapper&quot;&gt;<br>                &lt;el-icon class=&quot;mx-2&quot;&gt;<br>                  &lt;Lock /&gt;<br>                &lt;/el-icon&gt;<br>                &lt;el-input<br>                  v-model=&quot;loginData.password&quot;<br>                  placeholder=&quot;请输入密码&quot;<br>                  type=&quot;password&quot;<br>                  name=&quot;password&quot;<br>                  size=&quot;large&quot;<br>                  class=&quot;h-[48px] pr-2&quot;<br>                  show-password<br>                  @keyup.enter=&quot;handleLoginSubmit&quot;<br>                /&gt;<br>              &lt;/div&gt;<br>            &lt;/el-form-item&gt;<br>          &lt;/el-tooltip&gt;<br><br>          &lt;!-- 滑块验证码 --&gt;<br>          &lt;Vcode :show=&quot;isShow&quot; @success=&quot;onSuccess&quot; @close=&quot;onClose&quot; /&gt;<br><br>          &lt;div class=&quot;flex-x-between w-full py-1&quot;&gt;<br>            &lt;el-checkbox&gt; 记住我 &lt;/el-checkbox&gt;<br><br>            &lt;el-link type=&quot;primary&quot; href=&quot;/forget-password&quot;&gt; 忘记密码 &lt;/el-link&gt;<br>          &lt;/div&gt;<br><br>          &lt;!-- 登录按钮 --&gt;<br>          &lt;el-button<br>            :loading=&quot;loading&quot;<br>            type=&quot;primary&quot;<br>            size=&quot;large&quot;<br>            class=&quot;w-full&quot;<br>            @click.prevent=&quot;handleLoginSubmit&quot;<br>          &gt;<br>            登录<br>          &lt;/el-button&gt;<br>        &lt;/el-form&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import loginApi from &quot;@/api/login&quot;<br>import type &#123; FormInstance &#125; from &quot;element-plus&quot;;<br><br><br>import Vcode from &quot;vue3-puzzle-vcode&quot;;<br><br>const isShow = ref(false);<br>const onClose = () =&gt; &#123;<br>  isShow.value = false;<br>&#125;;<br><br>const onSuccess = () =&gt; &#123;<br>  onClose(); // 验证成功，手动关闭模态框<br>  // 调用登录接口发送登录请求<br>  loading.value = true;<br>    loginApi.login(loginData.value)<br>    .then(async () =&gt; &#123;<br>      ElMessage(&#123;<br>        message: &quot;登录成功&quot;,<br>        type: &quot;success&quot;,<br>      &#125;);<br>    &#125;)<br>    .catch(() =&gt; &#123;<br>      ElMessage(&#123;<br>        message: &quot;登录失败请重试&quot;,<br>        type: &quot;error&quot;,<br>      &#125;);<br>    &#125;)<br>    .finally(() =&gt; &#123;<br>      loading.value = false;<br>    &#125;);<br>&#125;;<br><br>const loginFormRef = ref&lt;FormInstance&gt;();<br><br>const loading = ref(false); // 按钮 loading 状态<br>const isCapslock = ref(false); // 是否大写锁定<br><br>const loginData = ref(&#123;<br>  username: &quot;admin&quot;,<br>  password: &quot;123456&quot;,<br>&#125;);<br><br>const loginRules = computed(() =&gt; &#123;<br>  return &#123;<br>    username: [<br>      &#123;<br>        required: true,<br>        trigger: &quot;blur&quot;,<br>        message: &quot;请输入用户名&quot;,<br>      &#125;,<br>    ],<br>    password: [<br>      &#123;<br>        required: true,<br>        trigger: &quot;blur&quot;,<br>        message: &quot;请输入密码&quot;,<br>      &#125;,<br>      &#123;<br>        min: 6,<br>        message: &quot;密码不能少于6位&quot;,<br>        trigger: &quot;blur&quot;,<br>      &#125;,<br>    ],<br>  &#125;;<br>&#125;);<br>// 登录方法<br>async function handleLoginSubmit() &#123;<br>  loginFormRef.value?.validate((valid: boolean) =&gt; &#123;<br>    if (valid) &#123;<br>      isShow.value = true;<br>    &#125;<br>  &#125;);<br>&#125;<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>loginApi 外部导入的接口里面有登录login方法</li><li>点击登录触发handleLoginSubmit方法，然后打开滑块拼图验证码</li><li>验证通过之后调用登录login接口，会有验证 如果账号密码不正确一样会登录失败</li><li>账号密码正确，滑块验证通过，才会登录成功</li></ul><p>图片展示</p><img src="211.png" class="custom-img" /><h3 id="自定义图片"><a href="#自定义图片" class="headerlink" title="自定义图片"></a>自定义图片</h3><p>通过 <code>imgs</code> 属性传递图片数组，可以为滑动拼图验证码设置自定义图片</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;Vcode<br>    :show=&quot;true&quot;<br>    :imgs=&quot;imgs&quot;<br>    canvasWidth=&quot;400&quot;<br>    canvasHeight=&quot;200&quot;<br>    successText=&quot;Great! Verification Passed&quot;<br>    failText=&quot;Oops! Try Again&quot;<br>    className=&quot;my-custom-class&quot;<br>    :zIndex=&quot;1000&quot;<br>    @success=&quot;onSuccess&quot;<br>    @fail=&quot;onFail&quot;<br>  /&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup&gt;<br>// 滑块验证码插件<br>import Vcode from &quot;vue3-puzzle-vcode&quot;;<br><br>import img01 from &quot;@/assets/images/img01.png&quot;;<br>import img02 from &quot;@/assets/images/img02.png&quot;;<br><br>const imgs = ref([img01, img02]);<br><br>// 控制滑块验证码显示<br>const isShow = ref(false);<br><br>onSuccess() &#123;<br>  console.log(&#x27;验证通过！&#x27;);<br>&#125;,<br>onFail() &#123;<br>  console.log(&#x27;验证失败，请重试！&#x27;);<br>&#125;,<br>  <br>&lt;/script&gt;<br><br>&lt;style&gt;<br>/* 自定义样式 */<br>.my-custom-class &#123;<br>  border: 2px solid #007aff;<br>  border-radius: 8px;<br>  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);<br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><h3 id="设置拼图尺寸"><a href="#设置拼图尺寸" class="headerlink" title="设置拼图尺寸"></a>设置拼图尺寸</h3><p>调整拼图区域和拼图块大小，可以通过修改 <code>canvasWidth</code>, <code>canvasHeight</code>, 和 <code>puzzleScale</code> 来实现。</p><p><code>canvasWidth</code> 默认值 <code>310px</code>，<code>canvasHeight</code> 默认值 <code>160px</code></p><p><code>puzzleScale</code> 拼图块的大小比例，0.2 ～ 2 ，数字越大，拼图越大，<code>默认值 1</code></p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;Vcode<br>  :canvasWidth=&quot;350&quot;<br>  :canvasHeight=&quot;180&quot;<br>  :puzzleScale=&quot;1.5&quot;<br>  :sliderSize=&quot;60&quot;<br>  @success=&quot;onSuccess&quot;<br>/&gt;<br></code></pre></td></tr></table></figure><ul><li><p><strong>canvasWidth 和 canvasHeight</strong>: 设置主图区域大小，例如宽 <code>350px</code>，高 <code>180px</code></p></li><li><p><strong>puzzleScale</strong>: 拼图块大小比例，设置为 <code>1.5</code> 会使拼图块更大</p></li><li><p><strong>sliderSize</strong>: 调整滑块的尺寸，例如 <code>60px</code>  ，默认值 <code>50px</code></p></li></ul><h3 id="设置文字提示"><a href="#设置文字提示" class="headerlink" title="设置文字提示"></a>设置文字提示</h3><p>可以自定义成功、失败和滑动提示文字，方便多语言或特定场景的定制</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;Vcode<br>  successText=&quot;You did it!&quot;<br>  failText=&quot;Please try again.&quot;<br>  sliderText=&quot;Slide to fit the puzzle piece&quot;<br>/&gt;<br></code></pre></td></tr></table></figure><ul><li><code>successText</code>：验证成功时的提示文字，默认值 <code>验证通过</code></li><li><code>failText</code>：验证失败时的提示文字，默认值 <code>验证失败，请重试</code></li><li><code>sliderText</code>：下方滑动条里的文字，默认值 <code>拖动滑块完成拼图</code></li></ul><h3 id="改变显示形式"><a href="#改变显示形式" class="headerlink" title="改变显示形式"></a>改变显示形式</h3><p>通过 <code>type</code> 属性可以切换展示形式，默认是 <code>modal </code>形式 ：</p><ul><li><code>modal</code>: 模态框，居中弹出</li><li><code>inside</code>: 内嵌到页面的某一部分</li></ul><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 模态框形式 --&gt;<br>&lt;Vcode type=&quot;modal&quot; :show=&quot;showCaptcha&quot; @close=&quot;closeCaptcha&quot; /&gt;<br><br>&lt;!-- 内嵌形式 --&gt;<br>&lt;Vcode type=&quot;inside&quot; /&gt;<br></code></pre></td></tr></table></figure><h3 id="调整样式层级"><a href="#调整样式层级" class="headerlink" title="调整样式层级"></a>调整样式层级</h3><p>可以通过 <code>zIndex</code> 属性调整验证码弹框的样式层级，避免与其他页面元素冲突，默认值 <code>999</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;Vcode<br>  type=&quot;modal&quot;<br>  :zIndex=&quot;1050&quot;<br>/&gt;<br></code></pre></td></tr></table></figure><h3 id="捕获事件"><a href="#捕获事件" class="headerlink" title="捕获事件"></a>捕获事件</h3><p>通过事件处理成功、失败等状态：</p><ul><li><code>@success</code>: 滑动拼图验证通过时触发。</li><li><code>@fail</code>: 滑动拼图验证失败时触发。</li><li><code>@close</code>: 模态框关闭时触发（适用于 <code>modal</code> 类型）</li></ul><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;Vcode<br>  @success=&quot;onVerificationSuccess&quot;<br>  @fail=&quot;onVerificationFail&quot;<br>  @close=&quot;onClose&quot;<br>/&gt;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">onVerificationSuccess</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;滑动拼图验证成功！&#x27;</span>);<br>&#125;,<br><span class="hljs-title function_">onVerificationFail</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;滑动拼图验证失败，请重试！&#x27;</span>);<br>&#125;,<br><span class="hljs-title function_">onClose</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;验证码弹框已关闭！&#x27;</span>);<br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过 <code>vue3-puzzle-vcode</code> 插件的参数，可以实现高度自定义的滑动拼图验证码，包括：</p><ol><li>使用自定义图片 (<code>imgs</code>)</li><li>调整验证码样式和尺寸</li><li>自定义文字提示和行为</li><li>切换展示形式（模态框或内嵌）</li><li>捕获用户交互事件处理业务逻辑</li></ol><blockquote><p>如果需要更复杂的样式调整，可以结合 <code>className</code> 和自定义 CSS 来完成</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx反向代理</title>
    <link href="/huyanqun.github.io/2024/12/09/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    <url>/huyanqun.github.io/2024/12/09/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>在使用 nginx 进行反向代理时，可以将它作为中间层，用于代理客户端请求到后端服务，同时提升性能、支持负载均衡以及增强安全性</p><h3 id="nginx官方文档"><a href="#nginx官方文档" class="headerlink" title="nginx官方文档"></a>nginx官方文档</h3><p><a href="http://nginx.org/">http://nginx.org</a></p><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p><a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a></p><h3 id="centos-安装-nginx"><a href="#centos-安装-nginx" class="headerlink" title="centos 安装 nginx"></a>centos 安装 nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装基础库</span><br>yum install gcc gcc-c++<br>yum install -y pcre pcre-devel<br>yum install -y zlib zlib-devel<br>yum install -y openssl openssl-devel<br><br><span class="hljs-comment"># 下载nginx</span><br><span class="hljs-built_in">cd</span> /usr/local<br>wget http://nginx.org/download/nginx-1.22.1.tar.gz<br><br><span class="hljs-comment"># 解压</span><br>tar -zxvf nginx-1.22.1.tar.gz<br><span class="hljs-built_in">cd</span> ./nginx-1.22.1<br><br><span class="hljs-comment"># 初始化配置，添加ssl模块</span><br>./configure --with-http_ssl_module<br><br><span class="hljs-comment"># 编译源码</span><br>make<br><span class="hljs-comment"># 安装</span><br>make install<br></code></pre></td></tr></table></figure><ul><li><p>如果没有进入cd &#x2F;usr&#x2F;local 这个目录 在别的地方安装的 nginx也会出现在这个目录（usr&#x2F;local&#x2F;nginx）因为这个是默认目录</p></li><li><p>–with-http_ssl_module  这个模块可添加也可不添加，如果不添加那么直接执行 .&#x2F;configure</p></li></ul><h3 id="nginx-常用命令"><a href="#nginx-常用命令" class="headerlink" title="nginx 常用命令"></a>nginx 常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># nginx 安装目录 /usr/local/nginx/sbin 下执行</span><br><span class="hljs-comment"># 启动</span><br>./nginx<br><span class="hljs-comment"># 热重载(重启)</span><br>./nginx -s reload<br><span class="hljs-comment"># 停止</span><br>./nginx -s stop<br></code></pre></td></tr></table></figure><h3 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 项目打包</span><br>pnpm run build<br><span class="hljs-comment"># 上传文件至远程服务器</span><br>将打包生成在 `dist` 目录文件拷贝至 `/usr/local/nginx/html` 目录<br><span class="hljs-comment"># nginx.cofig 配置</span><br>server &#123;<br>listen     80;<br>server_name  localhost;<br><span class="hljs-comment"># 前端页面</span><br>location / &#123;<br>root /usr/local/nginx/html/dist;<br>            index index.html index.htm;<br>&#125;<br><span class="hljs-comment"># 反向代理配置</span><br>location /prod-api/ &#123;<br>      <span class="hljs-comment">#  替换后端API地址，注意保留后面的斜杠 /</span><br>      <span class="hljs-comment">#  例如：http://xxx.xxx.com/;</span><br>      <span class="hljs-comment">#  47.119.148.36 这个是云服务公网IP</span><br>      <span class="hljs-comment">#  8999 这个是后端端口，端口需要在安全组里面开通</span><br>      proxy_pass http://47.119.148.36:8999/;<br>      proxy_set_header Host <span class="hljs-variable">$host</span>;<br>      proxy_set_header X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>      proxy_set_header X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>      proxy_set_header X-Forwarded-Proto <span class="hljs-variable">$scheme</span>; <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="nginx-cofig-完整配置"><a href="#nginx-cofig-完整配置" class="headerlink" title="nginx.cofig 完整配置"></a>nginx.cofig 完整配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><br><span class="hljs-comment">#user  nobody;</span><br><span class="hljs-attribute">worker_processes</span>  <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">#error_log  logs/error.log;</span><br><span class="hljs-comment">#error_log  logs/error.log  notice;</span><br><span class="hljs-comment">#error_log  logs/error.log  info;</span><br><br><span class="hljs-comment">#pid        logs/nginx.pid;</span><br><br><br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;<br>&#125;<br><br><br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br><br>    <span class="hljs-comment">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br>    <span class="hljs-comment">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br>    <span class="hljs-comment">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><br>    <span class="hljs-comment">#access_log  logs/access.log  main;</span><br><br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br>    <span class="hljs-comment">#tcp_nopush     on;</span><br><br>    <span class="hljs-comment">#keepalive_timeout  0;</span><br>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;<br><br>    <span class="hljs-comment">#gzip  on;</span><br><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span> localhost;<br><br>        <span class="hljs-comment"># 前端页面</span><br>        <span class="hljs-section">location</span> / &#123;<br>            <span class="hljs-attribute">root</span> /usr/local/nginx/html/dist;<br>            <span class="hljs-attribute">index</span> index.html index.htm;<br>        &#125;<br>        <br>        <span class="hljs-comment"># 后端反向代理</span><br>        <span class="hljs-section">location</span> /prod-api/ &#123;<br>            <span class="hljs-attribute">proxy_pass</span> http://47.119.148.36:8999/;<br>            <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br>            <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>            <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>            <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pinia模块化</title>
    <link href="/huyanqun.github.io/2024/12/05/pinia%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    <url>/huyanqun.github.io/2024/12/05/pinia%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在 Vue 3 的开发中，<strong>Pinia</strong> 是官方推荐的状态管理库。相比 Vuex，它更轻量化且完全支持组合式 API，同时类型推导优秀，是 TypeScript 用户的理想选择</p></blockquote><h3 id="安装和配置-Pinia"><a href="#安装和配置-Pinia" class="headerlink" title="安装和配置 Pinia"></a>安装和配置 Pinia</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install pinia<br></code></pre></td></tr></table></figure><p>在 <code>main.ts</code> 文件中引入并挂载 <code>Pinia</code>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// main.ts</span><br><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; createPinia &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span>;<br><br><span class="hljs-keyword">const</span> pinia = <span class="hljs-title function_">createPinia</span>();<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)<br>app.<span class="hljs-title function_">use</span>(pinia)<br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="模块化状态管理"><a href="#模块化状态管理" class="headerlink" title="模块化状态管理"></a>模块化状态管理</h3><p>将 <code>Pinia</code> 的状态管理按照功能拆分到不同模块中</p><ul><li><p><code>userStore</code>：管理用户的登录状态及基本信息</p></li><li><p><code>deptStore</code>：管理部门的增删改查</p></li></ul><p>文件结构</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">src/<br>├── store/<br>│   ├── modules<br>|<span class="hljs-string">   </span>|<span class="hljs-string">├── dept.ts</span><br><span class="hljs-string"></span>|<span class="hljs-string"></span>|<span class="hljs-string">├── user.ts</span><br><span class="hljs-string">│   └── index.ts (用于统一导出所有 modules 模块)</span><br></code></pre></td></tr></table></figure><h3 id="实现各个模块"><a href="#实现各个模块" class="headerlink" title="实现各个模块"></a>实现各个模块</h3><p>用户状态模块（<code>user.ts</code>）</p><p>user：容器名称</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useUserStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&quot;user&quot;</span>, &#123;<br>  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123;<br>    <br>  &#125;),<br>    <br>  <span class="hljs-attr">getters</span>:&#123;<br>      <br>  &#125;,<br><br>  <span class="hljs-attr">actions</span>: &#123;<br>    <br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useUserStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> user = <span class="hljs-title function_">ref</span>(&#123;<br>    <span class="hljs-attr">roles</span>: [],<br>    <span class="hljs-attr">perms</span>: [],<br>  &#125;);<br><br>  <span class="hljs-comment">// 登录</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">login</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">void</span>&gt;(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-comment">// 退出登录</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">logout</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">void</span>&gt;(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-comment">// 删除 token</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">resetToken</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">void</span>&gt;(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>      <br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> &#123;<br>    user,<br>    login,<br>    logout,<br>    resetToken,<br>  &#125;;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="在-index-ts-种统一管理模块"><a href="#在-index-ts-种统一管理模块" class="headerlink" title="在 index.ts 种统一管理模块"></a>在 index.ts 种统一管理模块</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123; <span class="hljs-title class_">App</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; createPinia &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;pinia&quot;</span>;<br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createPinia</span>();<br><br><span class="hljs-comment">// 全局注册 store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">setupStore</span>(<span class="hljs-params"><span class="hljs-attr">app</span>: <span class="hljs-title class_">App</span>&lt;<span class="hljs-title class_">Element</span>&gt;</span>) &#123;<br>  app.<span class="hljs-title function_">use</span>(store);<br>&#125;<br><br><span class="hljs-keyword">export</span> * <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./modules/app&quot;</span>;<br><span class="hljs-keyword">export</span> * <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./modules/dept&quot;</span>;<br><br><span class="hljs-keyword">export</span> &#123; store &#125;;<br></code></pre></td></tr></table></figure><h3 id="在组件中使用模块化-Store"><a href="#在组件中使用模块化-Store" class="headerlink" title="在组件中使用模块化 Store"></a>在组件中使用模块化 Store</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> </span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;userStore.user.avatar&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;userStore.user.avatar&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">v-else</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../assets/images/default-avatar.png&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;默认头像&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; useUserStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/store/modules/user&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> userStore = <span class="hljs-title function_">useUserStore</span>();</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><blockquote><p>以后可以在 <strong>modules</strong> 里面添加模块 然后在 <strong>index.ts</strong> 里面导出 最后在需要使用的组件里面导入就可以使用了</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>封装对话框组件</title>
    <link href="/huyanqun.github.io/2024/12/02/%E5%B0%81%E8%A3%85%E5%AF%B9%E8%AF%9D%E6%A1%86%E7%BB%84%E4%BB%B6/"/>
    <url>/huyanqun.github.io/2024/12/02/%E5%B0%81%E8%A3%85%E5%AF%B9%E8%AF%9D%E6%A1%86%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>一个简单的表格布局，点击 <code>编辑按钮</code> 显示对话框（element plus 组件库），使用<code>v-model=&quot;dialogVisible&quot;</code> 绑定，控制对话框的显示和影藏（默认为隐藏状态），按钮绑定 <code>@click=&quot;onEditChannel(row, $index)&quot;</code> 事件，点击的时候拿到这一行的数据 <code>row</code>  调用点击事件绑定的方法打开对话框 <code>dialogVisible.value = true</code> </p><blockquote><p>index.vue</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;el-table v-loading=&quot;loading&quot; :data=&quot;channelList&quot; style=&quot;width: 100%&quot;&gt;<br>      &lt;el-table-column type=&quot;index&quot; label=&quot;序号&quot; width=&quot;100&quot; /&gt;<br>      &lt;el-table-column prop=&quot;name&quot; label=&quot;名称&quot; /&gt;<br>      &lt;el-table-column prop=&quot;alias&quot; label=&quot;别名&quot; /&gt;<br>      &lt;el-table-column label=&quot;操作&quot; width=&quot;150&quot;&gt;<br>        &lt;!-- 解构 row, $index --&gt;<br>        &lt;template #default=&quot;&#123; row, $index &#125;&quot;&gt;<br>          &lt;el-button<br>            plain<br>            type=&quot;danger&quot;<br>            circle<br>            :icon=&quot;Delete&quot;<br>            @click=&quot;onDelChannel(row, $index)&quot;<br>          &gt;&lt;/el-button&gt;<br>          &lt;el-button<br>            plain<br>            type=&quot;primary&quot;<br>            circle<br>            :icon=&quot;Edit&quot;<br>            @click=&quot;onEditChannel(row, $index)&quot;<br>          &gt;&lt;/el-button&gt;<br>        &lt;/template&gt;<br>      &lt;/el-table-column&gt;<br>      &lt;template #empty&gt;<br>        &lt;el-empty description=&quot;暂无数据&quot;&gt;&lt;/el-empty&gt;<br>      &lt;/template&gt;<br>    &lt;/el-table&gt;<br>&lt;!-- 对话框 --&gt;<br>&lt;el-dialog v-model=&quot;dialogVisible&quot; title=&quot;Tips&quot; width=&quot;500&quot;&gt;<br>    &lt;span&gt;This is a message&lt;/span&gt;<br>        &lt;template #footer&gt;<br>          &lt;div class=&quot;dialog-footer&quot;&gt;<br>            &lt;el-button @click=&quot;dialogVisible = false&quot;&gt;Cancel&lt;/el-button&gt;<br>            &lt;el-button type=&quot;primary&quot; @click=&quot;dialogVisible = false&quot;&gt; Confirm &lt;/el-button&gt;<br>          &lt;/div&gt;<br>        &lt;/template&gt;<br>  &lt;/el-dialog&gt;<br>&lt;/template&gt;<br>&lt;script setup&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;<br>import &#123; Delete, Edit &#125; from &#x27;@element-plus/icons-vue&#x27;<br>import &#123; articleGetChannelList &#125; from &#x27;../../api/article&#x27;<br>const channelList = ref([])<br>// 加载条<br>const loading = ref(false)<br>// 控制对话框的显示和隐藏 （默认为隐藏）<br>const dialogVisible = ref(false)<br>// 获取表格数据<br>const getChannelList = async () =&gt; &#123;<br>  loading.value = true<br>  const res = await articleGetChannelList()<br>  channelList.value = res.data.data<br>  loading.value = false<br>&#125;<br>// 可以直接调用 也可以在 onMounted 中调用<br>getChannelList()<br><br>// 编辑<br>const onEditChannel = (row) =&gt; &#123;<br>    // 打开对话框<br>  dialogVisible.value = true<br>&#125;<br>// 删除<br>const onDelChannel = (row, $index) =&gt; &#123;&#125;<br>// 添加<br>const onAddChannel = () =&gt; &#123;<br>  // 打开对话框<br>  dialogVisible.value = true<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><blockquote><p>封装对话框组件-ChannelEdit.vue</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;el-dialog v-model=&quot;dialogVisible&quot; title=&quot;Tips&quot; width=&quot;500&quot;&gt;<br>    &lt;span&gt;This is a message&lt;/span&gt;<br>    &lt;template #footer&gt;<br>      &lt;div class=&quot;dialog-footer&quot;&gt;<br>        &lt;el-button @click=&quot;dialogVisible = false&quot;&gt;Cancel&lt;/el-button&gt;<br>        &lt;el-button type=&quot;primary&quot; @click=&quot;dialogVisible = false&quot;&gt; Confirm &lt;/el-button&gt;<br>      &lt;/div&gt;<br>    &lt;/template&gt;<br>  &lt;/el-dialog&gt;<br>&lt;/template&gt;<br><br>&lt;script setup&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;<br>const dialogVisible = ref(false)<br><br>// 根据这个值来控制弹窗<br>// 如果传递过来的值是 (&#123;&#125;) 那么为新增 反之为编辑<br>const showOpenDialog = (row) =&gt; &#123;<br>  console.log(row)<br>  dialogVisible.value = true<br>&#125;<br><br>defineExpose(&#123; showOpenDialog &#125;)<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><blockquote><p>从 index.vue 里面抽离组件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;el-table v-loading=&quot;loading&quot; :data=&quot;channelList&quot; style=&quot;width: 100%&quot;&gt;<br>      &lt;el-table-column type=&quot;index&quot; label=&quot;序号&quot; width=&quot;100&quot; /&gt;<br>      &lt;el-table-column prop=&quot;name&quot; label=&quot;名称&quot; /&gt;<br>      &lt;el-table-column prop=&quot;alias&quot; label=&quot;别名&quot; /&gt;<br>      &lt;el-table-column label=&quot;操作&quot; width=&quot;150&quot;&gt;<br>        &lt;!-- 解构 row, $index --&gt;<br>        &lt;template #default=&quot;&#123; row, $index &#125;&quot;&gt;<br>          &lt;el-button<br>            plain<br>            type=&quot;danger&quot;<br>            circle<br>            :icon=&quot;Delete&quot;<br>            @click=&quot;onDelChannel(row, $index)&quot;<br>          &gt;&lt;/el-button&gt;<br>          &lt;el-button<br>            plain<br>            type=&quot;primary&quot;<br>            circle<br>            :icon=&quot;Edit&quot;<br>            @click=&quot;onEditChannel(row, $index)&quot;<br>          &gt;&lt;/el-button&gt;<br>        &lt;/template&gt;<br>      &lt;/el-table-column&gt;<br>      &lt;template #empty&gt;<br>        &lt;el-empty description=&quot;暂无数据&quot;&gt;&lt;/el-empty&gt;<br>      &lt;/template&gt;<br>    &lt;/el-table&gt;<br>    &lt;!-- 对话框组件（新增和编辑） --&gt;<br>    &lt;!-- 通过 ref 绑定 --&gt;<br>    &lt;ChannelEdit ref=&quot;dialog&quot; /&gt;<br>&lt;/template&gt;<br>&lt;script setup&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;<br>import &#123; Delete, Edit &#125; from &#x27;@element-plus/icons-vue&#x27;<br>import &#123; articleGetChannelList &#125; from &#x27;../../api/article&#x27;<br>import ChannelEdit from &#x27;./components/ChannelEdit.vue&#x27;<br>const channelList = ref([])<br>// 加载条<br>const loading = ref(false)<br>const dialog = ref()<br>// 获取表格数据<br>const getChannelList = async () =&gt; &#123;<br>  loading.value = true<br>  const res = await articleGetChannelList()<br>  channelList.value = res.data.data<br>  loading.value = false<br>&#125;<br>// 可以直接调用 也可以在 onMounted 中调用<br>getChannelList()<br><br>// 编辑<br>const onEditChannel = (row) =&gt; &#123;<br>  // 编辑的时候要把当前选中的行传进去 也就是整个 row<br>  dialog.value.showOpenDialog(row)<br>&#125;<br>// 删除<br>const onDelChannel = (row, $index) =&gt; &#123;&#125;<br>// 添加<br>const onAddChannel = () =&gt; &#123;<br>  // 新增的时候直接传递 (&#123;&#125;)<br>  dialog.value.showOpenDialog(&#123;&#125;)<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SoftWare Package</title>
    <link href="/huyanqun.github.io/2024/11/06/SoftWare-Package/"/>
    <url>/huyanqun.github.io/2024/11/06/SoftWare-Package/</url>
    
    <content type="html"><![CDATA[<h3 id="Xshell8与Xftp8"><a href="#Xshell8与Xftp8" class="headerlink" title="Xshell8与Xftp8"></a>Xshell8与Xftp8</h3><p>下载地址：<a href="https://www.xshell.com/zh/free-for-home-school/">https://www.xshell.com/zh/free-for-home-school/</a></p><img src="103.png" class="custom-img" /><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><p>下载地址：<a href="https://nginx.org/en/download.html">https://nginx.org/en/download.html</a></p><img src="244.png" class="custom-img" />]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>window下使用nvm管理node</title>
    <link href="/huyanqun.github.io/2024/11/05/window%E4%B8%8B%E4%BD%BF%E7%94%A8nvm%E7%AE%A1%E7%90%86node/"/>
    <url>/huyanqun.github.io/2024/11/05/window%E4%B8%8B%E4%BD%BF%E7%94%A8nvm%E7%AE%A1%E7%90%86node/</url>
    
    <content type="html"><![CDATA[<blockquote><p>nvm 全名 <strong>node.js version management</strong>，是一个 nodejs 的 版本管理工具 通过它可以安装和切换不同版本的 nodejs</p></blockquote><h3 id="安装nvm"><a href="#安装nvm" class="headerlink" title="安装nvm"></a>安装nvm</h3><p>下载地址：<a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a></p><img src="518.png" class="custom-img" /><p>选择 <code>nvm 安装路径</code>，注意路径不要有 <code>空格和中文</code></p><img src="805.png" class="custom-img" /><p>选择 nodejs 的安装路径</p><img src="132.png" class="custom-img" /><p>安装完成后在终端输入<code>nvm version</code>，能查到版本号说明安装成功了</p><img src="355.png" class="custom-img" /><h3 id="配置-下载源"><a href="#配置-下载源" class="headerlink" title="配置 下载源"></a>配置 <code>下载源</code></h3><p>下载 node.js 时候国内限速，此时可以通过修改 nvm 安装路径下的 <code>settings.txt</code> 文件来提速</p><blockquote><p>在命令行输入 nvm root 可以找到 nvm安装路径 -&gt; 找到 settings.txt 文件 -&gt; 修改下载源</p></blockquote><img src="911.png" class="custom-img" /><p>添加镜像地址</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">node_mirror: https:<span class="hljs-regexp">//</span>npmmirror.com<span class="hljs-regexp">/mirrors/</span>node/<br>npm_mirror: https:<span class="hljs-regexp">//</span>npmmirror.com<span class="hljs-regexp">/mirrors/</span>npm/<br></code></pre></td></tr></table></figure><p>修改完后的 <code>settings.txt</code></p><img src="206.png" class="custom-img" /><h3 id="使用nvm安装node"><a href="#使用nvm安装node" class="headerlink" title="使用nvm安装node"></a>使用nvm安装node</h3><p>在终端输入 <code>nvm list available</code>， 查看网络可以安装的版本</p><img src="440.png" class="custom-img" /><p>选择一个版本安装，比如 <code>nvm install 20.12.2</code></p><p>使用这个版本的 node，<code>nvm use 20.12.2</code> 输入<code>node -v</code> 和 <code>npm -v</code>可以查询到 node 和 npm 的版本号</p><p>输入<code>nvm list</code> 查看已经安装的node，<code>* </code>号表示当前使用的 node 版本</p><img src="821.png" class="custom-img" /><h3 id="nvm常用命令"><a href="#nvm常用命令" class="headerlink" title="nvm常用命令"></a>nvm常用命令</h3><table><thead><tr><th><strong>命令</strong></th><th align="left"><strong>说明</strong></th></tr></thead><tbody><tr><td>nvm list</td><td align="left">查看已经安装的版本</td></tr><tr><td>nvm list available</td><td align="left">查看网络可以安装的版本</td></tr><tr><td>nvm node_mirror [url]</td><td align="left">设置或者查看 setting.txt 中的 node_mirror</td></tr><tr><td>nvm npm_mirror [url]</td><td align="left">设置或者查看 setting.txt 中的 npm_mirror</td></tr><tr><td>nvm uninstall</td><td align="left">卸载指定的版本</td></tr><tr><td>nvm root [path]</td><td align="left">设置和查看 root 路径</td></tr><tr><td>nvm version</td><td align="left">查看当前的版本</td></tr></tbody></table><p>配置 nvm 和 nodejs  的环境变量</p><p>在 nvm 的根目录 <strong><code>新建两个文件夹</code></strong> <code>node_global</code> 和 <code>node_cache</code></p><img src="230.png" class="custom-img" /><p>配置全局安装的模块路径和缓存路径 (<strong>两个路径即是两个文件夹的路径</strong>)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> prefix <span class="hljs-string">&quot;D:\nvm\node_global&quot;</span><br>npm config <span class="hljs-built_in">set</span> cache <span class="hljs-string">&quot;D:\nvm\node_cache&quot;</span><br></code></pre></td></tr></table></figure><p>环境变量一般会自动生成，如果没有按照下图配置 右键 “我的电脑”&#x3D;》属性&#x3D;》高级系统设置&#x3D;》环境变量</p><img src="327.png" class="custom-img" /><p>用户变量 和 系统变量 <strong>都要配置</strong></p><img src="701.png" class="custom-img" /><blockquote><p>注意：【用户变量】和 【系统变量】中的path变量，%NVM_HOME%  和  %NVM_SYMLINK% 理论上是nvm安装成功后自动生成的</p><p>自己新建 D:\nvm\node_global 和 D:\nvm\node_cache</p></blockquote><p>在【系统变量】新建环境变量 <code>NODE_PATH</code>，值为 <code>D:\nvm\node_global\node_modules</code> ，其中 <code>D:\nvm\node_global\node_modules</code> 是上述创建的全局模块安装路径文件夹</p><img src="337.png" class="custom-img" /><p>测试一下 <code>npm install express -g</code> 查看 <code>node_modules</code> 是否会生成 <code>express</code> 文件夹</p><img src="608.png" class="custom-img" />]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue组件属性传递</title>
    <link href="/huyanqun.github.io/2024/11/05/Vue%E7%BB%84%E4%BB%B6%E5%B1%9E%E6%80%A7%E4%BC%A0%E9%80%92/"/>
    <url>/huyanqun.github.io/2024/11/05/Vue%E7%BB%84%E4%BB%B6%E5%B1%9E%E6%80%A7%E4%BC%A0%E9%80%92/</url>
    
    <content type="html"><![CDATA[<h3 id="父组件"><a href="#父组件" class="headerlink" title="父组件"></a>父组件</h3><p>定义一个 h1 标签 ，包裹 子组件 <code>child-component</code>  ，写了一个简单的计数功能，定义了一个字符串常量 <code>parentMessage</code> 和 响应式的 <code>count</code> , 通过 <code>message</code> 这个属性把常量 <code>parentMessage</code> 传递给子组件，子组件定义 <code>props</code> 接收 <code>message</code> 属性直接渲染。</p><p>注意：父传子 语法：<code>:message=&quot;parentMessage&quot;</code> </p><p><code>message</code> 是父组件传递给子组件的属性，<code>parentMessage</code> 是父组件定义的一个常量，子组件接收之后，调用属性直接渲染，<code>&lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</code></p><p>代码部分：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;父组件&lt;/h1&gt;<br>    &lt;child-component :message=&quot;parentMessage&quot; @increment=&quot;incrementCount&quot; /&gt;<br>    &lt;p&gt;当前计数: &#123;&#123; count &#125;&#125;&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;;<br>import ChildComponent from &#x27;./ChildComponent.vue&#x27;;<br><br>const parentMessage = &#x27;Hello from Parent!&#x27;;<br>const count = ref(0);<br><br>const incrementCount = () =&gt; &#123;<br>  count.value++;<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>逻辑说明：</p><ul><li><strong>响应式数据</strong>：使用 <code>ref</code> 定义一个响应式的计数 <code>count</code> 和一个常量 <code>parentMessage</code></li><li><strong>事件监听</strong>：通过 <code>@increment</code> 监听子组件发出的 <code>increment</code> 事件，并调用 <code>incrementCount</code> 方法</li></ul><h3 id="子组件-child-component"><a href="#子组件-child-component" class="headerlink" title="子组件 child-component"></a>子组件 child-component</h3><p>定义一个增加计数的方法 <code>increment</code>  然后定义 <code>emit</code> 发出事件，在 <code>increment</code>  方法中向父组件 发出更新计数的通知 <code>emit(&#39;increment&#39;)</code> 来通知父组件 更新计数，父组件则通过子组件发过来的通知 调用 <code>incrementCount</code>  方法 。</p><p>注意：子传父 语法：<code>@increment=&quot;incrementCount&quot;</code> </p><p><code>increment</code> 是子组件发出的通知，<code>incrementCount</code> 是调用父组件的哪个方法，即方法名 </p><p>代码部分：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h2&gt;子组件&lt;/h2&gt;<br>    &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;<br>    &lt;button @click=&quot;increment&quot;&gt;增加计数&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup&gt;<br>import &#123; defineProps, defineEmits &#125; from &#x27;vue&#x27;;<br><br>// 定义接收的属性<br>const props = defineProps&lt;&#123;<br>  message: string;<br>&#125;&gt;();<br><br>// 定义发出的事件<br>const emit = defineEmits([&quot;increment&quot;]);<br><br>// 增加计数的方法<br>const increment = () =&gt; &#123;<br>  emit(&#x27;increment&#x27;);<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>逻辑说明：</p><ul><li><strong>接收属性</strong>：使用 <code>defineProps</code> 定义 <code>message</code> 属性，用于接收父组件传来的数据</li><li><strong>事件发射</strong>：使用 <code>defineEmits</code> 定义要发出的 <code>increment</code> 事件，<code>increment</code> 方法中调用 <code>emit(&#39;increment&#39;)</code> 来通知父组件更新计数</li></ul><h3 id="整体逻辑"><a href="#整体逻辑" class="headerlink" title="整体逻辑"></a>整体逻辑</h3><ul><li><strong>父组件传子组件数据</strong>：通过 <code>:message</code> 将 <code>parentMessage</code> 传递给子组件。</li><li><strong>子组件向父组件传递事件</strong>：子组件在按钮点击时发出 <code>increment</code> 事件，父组件通过事件监听器接收到该事件并更新计数</li></ul><h3 id="模板部分"><a href="#模板部分" class="headerlink" title="模板部分"></a>模板部分</h3><ul><li><strong>父组件模板</strong>：<ul><li>显示组件标题和计数</li><li>嵌入子组件并传递 <code>message</code> 属性</li></ul></li><li><strong>子组件模板</strong>：<ul><li>显示子组件标题和接收到的 <code>message</code></li><li>提供一个按钮用于触发 <code>increment</code> 方法</li></ul></li></ul><blockquote><p>小提示：如果你想要在 <code>defineEmits</code> 中定义事件的 <code>参数类型</code>，可以这样写：</p><p>这样可以确保在触发事件时，所发出的事件符合预定的类型，从而避免潜在的错误</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> emit = defineEmits&lt;&#123;<br>  (<span class="hljs-attr">e</span>: <span class="hljs-string">&#x27;increment&#x27;</span>): <span class="hljs-keyword">void</span>;<br>&#125;&gt;();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>el-date-picker组件 UTC 时间格式问题</title>
    <link href="/huyanqun.github.io/2024/10/25/el-date-picker%E7%BB%84%E4%BB%B6-UTC-%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E9%97%AE%E9%A2%98/"/>
    <url>/huyanqun.github.io/2024/10/25/el-date-picker%E7%BB%84%E4%BB%B6-UTC-%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<blockquote><p>时间和日期是一个常见且复杂的任务 尤其是当涉及到不同时区和格式时 需要使用 JavaScript 中的 <code>dayjs</code> 库来处理时间差问题，特别是将 ISO 8601 时间字符串转换为所需格式</p></blockquote><h3 id="理解-UTC-和-ISO-8601-格式"><a href="#理解-UTC-和-ISO-8601-格式" class="headerlink" title="理解 UTC 和 ISO 8601 格式"></a>理解 UTC 和 ISO 8601 格式</h3><p>UTC**（协调世界时）是当前全球通用的时间标准，它并不受地方时间（如东八区、东五区等）的影响。UTC 时间通常以 ISO 8601 格式表示：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">2024-10-25T14:00:00.000Z</span><br></code></pre></td></tr></table></figure><ul><li><code>YYYY-MM-DD</code> 表示日期。</li><li><code>T</code> 是日期和时间之间的分隔符。</li><li><code>HH:mm:ss</code> 表示时间。</li><li><code>.000</code> 是毫秒（可选）。</li><li><code>Z</code> 表示该时间为 UTC 时间。</li></ul><p>选择的时间</p><img src="1729240488063.jpg" class="custom-img" /><p>发送的请求中的时间</p><img src="1018163633.png" class="custom-img" /><h3 id="使用-dayjs-处理-UTC-时间"><a href="#使用-dayjs-处理-UTC-时间" class="headerlink" title="使用 dayjs 处理 UTC 时间"></a>使用 <code>dayjs</code> 处理 UTC 时间</h3><p><code>dayjs</code> 是一个轻量级的 JavaScript 日期库，支持时间和日期的格式化、解析、比较和计算</p><h4 id="安装-dayjs"><a href="#安装-dayjs" class="headerlink" title="安装 dayjs"></a>安装 <code>dayjs</code></h4><p>如果你还没有安装 <code>dayjs</code>，可以使用 npm 或 yarn 进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install dayjs<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn add dayjs<br></code></pre></td></tr></table></figure><h4 id="修改-el-date-picker-组件"><a href="#修改-el-date-picker-组件" class="headerlink" title="修改 el-date-picker 组件"></a>修改 <code>el-date-picker</code> 组件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-date-picker</span></span><br><span class="hljs-tag">    <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;datetime&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Select date and time&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">clearable</span></span><br><span class="hljs-tag">    <span class="hljs-attr">format</span>=<span class="hljs-string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">value-format</span>=<span class="hljs-string">&quot;YYYY-MM-DDTHH:mm:ss&quot;</span></span><br><span class="hljs-tag">/&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>这个 value-format&#x3D;”YYYY-MM-DDTHH:mm:ss” 指定了一个特定的格式</p></blockquote><h4 id="最后效果："><a href="#最后效果：" class="headerlink" title="最后效果："></a>最后效果：</h4><p>选择的时间</p><img src="18163950.png" class="custom-img" /><p>发送的时间</p><img src="1018164115.png" class="custom-img" />]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Vue3中实现Excel文件的导入、导出与模板下载</title>
    <link href="/huyanqun.github.io/2024/10/25/%E5%9C%A8Vue3%E4%B8%AD%E5%AE%9E%E7%8E%B0Excel%E6%96%87%E4%BB%B6%E7%9A%84%E5%AF%BC%E5%85%A5%E3%80%81%E5%AF%BC%E5%87%BA%E4%B8%8E%E6%A8%A1%E6%9D%BF%E4%B8%8B%E8%BD%BD/"/>
    <url>/huyanqun.github.io/2024/10/25/%E5%9C%A8Vue3%E4%B8%AD%E5%AE%9E%E7%8E%B0Excel%E6%96%87%E4%BB%B6%E7%9A%84%E5%AF%BC%E5%85%A5%E3%80%81%E5%AF%BC%E5%87%BA%E4%B8%8E%E6%A8%A1%E6%9D%BF%E4%B8%8B%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在现代企业应用中，导入、导出功能是非常重要的一环，特别是需要批量处理数据时。本文将介绍如何在 <code>Vue3</code> 应用中实现客户数据的 <code>Excel</code>文件 <strong>导入</strong>、<strong>导出</strong>以及<strong>模板下载</strong>功能。将基于 <code>Element Plus</code> 和第三方库如 <code>XLSX</code> ，并结合 <code>后端API</code> 来完成这些功能</p></blockquote><h3 id="功能概述"><a href="#功能概述" class="headerlink" title="功能概述"></a>功能概述</h3><p><strong>导出功能</strong>：用户可以将数据列表以Excel文件的形式导出。</p><p><strong>导入功能</strong>：用户可以通过上传Excel文件，批量导入数据。</p><p><strong>下载模板功能</strong>：提供一个标准的Excel模板供用户下载，确保上传的文件格式正确。</p><h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><ul><li>Vue3</li><li>Element Plus</li><li>XLSX库（用于解析和生成Excel文件）</li><li>后端API接口（用于获取模板、导入、导出Excel数据）</li></ul><h3 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h3><h4 id="前端页面的布局"><a href="#前端页面的布局" class="headerlink" title="前端页面的布局"></a>前端页面的布局</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;excelBtn&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;success&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;exportToExcel&quot;</span>&gt;</span>导出<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-popover</span> <span class="hljs-attr">placement</span>=<span class="hljs-string">&quot;bottom&quot;</span> <span class="hljs-attr">:width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">trigger</span>=<span class="hljs-string">&quot;click&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;importBtn&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;downloadTemplate&quot;</span></span><br><span class="hljs-tag">                               &gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i-ep-Download</span> /&gt;</span>下载模板&lt;/el-button<br>                        &gt;<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;DialogImport&quot;</span></span><br><span class="hljs-tag">                               &gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i-ep-Upload</span> /&gt;</span>开始导入&lt;/el-button<br>                        &gt;<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">reference</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;success&quot;</span>&gt;</span>导入<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-popover</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-dialog</span></span><br><span class="hljs-tag">        <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;showDialogImport&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;导入数据&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;1000px&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">append-to-body</span></span><br><span class="hljs-tag">      &gt;</span><br>        <span class="hljs-comment">&lt;!-- 导入表单 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> <span class="hljs-attr">:model</span>=<span class="hljs-string">&quot;importData&quot;</span> <span class="hljs-attr">label-width</span>=<span class="hljs-string">&quot;100px&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Excel文件&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-upload</span></span><br><span class="hljs-tag">              <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;uploadRef&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">drag</span></span><br><span class="hljs-tag">              <span class="hljs-attr">accept</span>=<span class="hljs-string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">:limit</span>=<span class="hljs-string">&quot;1&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">:auto-upload</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">:file-list</span>=<span class="hljs-string">&quot;importData.fileList&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">:on-change</span>=<span class="hljs-string">&quot;handleFileChange&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">:on-exceed</span>=<span class="hljs-string">&quot;handleFileExceed&quot;</span></span><br><span class="hljs-tag">            &gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">el-icon</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-icon--upload&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">i-ep-upload-filled</span> /&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">el-icon</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-upload__text&quot;</span>&gt;</span><br>                将文件拖到此处，或<br>                <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>点击上传<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">tip</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>xls/xlsx files<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">el-upload</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">footer</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dialog-footer&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showDialogImport = false&quot;</span>&gt;</span>取消<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;importToExcel()&quot;</span>&gt;</span>确定<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">el-dialog</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="导入包和依赖-封装的接口，XLSX库，Element-Plus"><a href="#导入包和依赖-封装的接口，XLSX库，Element-Plus" class="headerlink" title="导入包和依赖 (封装的接口，XLSX库，Element Plus)"></a>导入包和依赖 (封装的接口，XLSX库，Element Plus)</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> <span class="hljs-title class_">CustomerAPI</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/api/customer&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123; <span class="hljs-title class_">UploadInstance</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;element-plus&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; genFileId &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;element-plus&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-variable constant_">XLSX</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;xlsx&quot;</span>;<br></code></pre></td></tr></table></figure><h4 id="实现数据导出功能"><a href="#实现数据导出功能" class="headerlink" title="实现数据导出功能"></a>实现数据导出功能</h4><blockquote><p>导出功能允许用户将数据以 Excel 文件形式下载。通过调用后端 API，将服务器返回的 Excel 文件以 Blob 格式创建下载链接，触发浏览器的下载操作。</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> pageQuery = <span class="hljs-title function_">reactive</span>(&#123;<br>  <span class="hljs-attr">pageNum</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">pageSize</span>: <span class="hljs-number">10</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-title function_">exportToExcel</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-title class_">CustomerAPI</span>.<span class="hljs-title function_">exportCustmoer</span>(pageQuery).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">response</span>: <span class="hljs-built_in">any</span></span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> fileData = response.<span class="hljs-property">data</span>;<br>    <span class="hljs-keyword">const</span> fileName = <span class="hljs-built_in">decodeURI</span>(<br>      response.<span class="hljs-property">headers</span>[<span class="hljs-string">&quot;content-disposition&quot;</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;;&quot;</span>)[<span class="hljs-number">1</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;=&quot;</span>)[<span class="hljs-number">1</span>]<br>    );<br>    <span class="hljs-keyword">const</span> fileType =<br>      <span class="hljs-string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8&quot;</span>;<br><br>    <span class="hljs-comment">// 创建 Blob 对象并生成下载链接</span><br>    <span class="hljs-keyword">const</span> blob = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([fileData], &#123; <span class="hljs-attr">type</span>: fileType &#125;);<br>    <span class="hljs-keyword">const</span> downloadUrl = <span class="hljs-variable language_">window</span>.<span class="hljs-property">URL</span>.<span class="hljs-title function_">createObjectURL</span>(blob);<br><br>    <span class="hljs-keyword">const</span> downloadLink = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;a&quot;</span>);<br>    downloadLink.<span class="hljs-property">href</span> = downloadUrl;<br>    downloadLink.<span class="hljs-property">download</span> = fileName;<br><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(downloadLink);<br>    downloadLink.<span class="hljs-title function_">click</span>();<br><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">removeChild</span>(downloadLink);<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">URL</span>.<span class="hljs-title function_">revokeObjectURL</span>(downloadUrl);<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="实现数据导入模板下载功能"><a href="#实现数据导入模板下载功能" class="headerlink" title="实现数据导入模板下载功能"></a>实现数据导入模板下载功能</h4><blockquote><p>模板下载功能允许用户下载一个标准的 Excel 文件，用户可以根据此文件的格式准备数据进行批量导入。此功能通过后端 API 提供文件模板，前端通过类似于导出功能的方式将文件下载到本地。</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-title function_">downloadTemplate</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-title class_">CustomerAPI</span>.<span class="hljs-title function_">customerTemplate</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> fileData = res.<span class="hljs-property">data</span>;<br>    <span class="hljs-keyword">const</span> fileName = <span class="hljs-built_in">decodeURI</span>(<br>      res.<span class="hljs-property">headers</span>[<span class="hljs-string">&quot;content-disposition&quot;</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;;&quot;</span>)[<span class="hljs-number">1</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;=&quot;</span>)[<span class="hljs-number">1</span>]<br>    );<br>    <span class="hljs-keyword">const</span> fileType =<br>      <span class="hljs-string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8&quot;</span>;<br>    <span class="hljs-keyword">const</span> blob = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([fileData], &#123; <span class="hljs-attr">type</span>: fileType &#125;);<br>    <span class="hljs-keyword">const</span> downloadUrl = <span class="hljs-variable language_">window</span>.<span class="hljs-property">URL</span>.<span class="hljs-title function_">createObjectURL</span>(blob);<br>    <span class="hljs-keyword">const</span> downloadLink = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;a&quot;</span>);<br>    downloadLink.<span class="hljs-property">href</span> = downloadUrl;<br>    downloadLink.<span class="hljs-property">download</span> = fileName;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(downloadLink);<br>    downloadLink.<span class="hljs-title function_">click</span>();<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">removeChild</span>(downloadLink);<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">URL</span>.<span class="hljs-title function_">revokeObjectURL</span>(downloadUrl);<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="实现客户数据导入功能"><a href="#实现客户数据导入功能" class="headerlink" title="实现客户数据导入功能"></a>实现客户数据导入功能</h4><blockquote><p>导入功能需要用户上传一个 Excel 文件，文件内容会被解析并通过 API 提交到后端。我们使用 Element Plus 的 <code>el-upload</code> 组件实现上传功能，同时处理文件变更和上传过程中的错误处理。</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 控制导入弹窗</span><br><span class="hljs-keyword">const</span> showDialogImport = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-comment">// 导入数据</span><br><span class="hljs-keyword">const</span> importData = <span class="hljs-title function_">reactive</span>(&#123;<br>  <span class="hljs-attr">file</span>: <span class="hljs-literal">undefined</span>,<br>  <span class="hljs-attr">fileList</span>: [],<br>&#125;);<br><span class="hljs-comment">// 上传的组件</span><br><span class="hljs-keyword">const</span> uploadRef = ref&lt;<span class="hljs-title class_">UploadInstance</span>&gt;();<br><br><span class="hljs-comment">// 处理文件变更</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleFileChange</span>(<span class="hljs-params"><span class="hljs-attr">file</span>: <span class="hljs-built_in">any</span></span>) &#123;<br>  importData.<span class="hljs-property">file</span> = file.<span class="hljs-property">raw</span>;<br>&#125;<br><br><span class="hljs-comment">// 处理文件上传超出限制</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleFileExceed</span>(<span class="hljs-params"><span class="hljs-attr">files</span>: <span class="hljs-built_in">any</span></span>) &#123;<br>  uploadRef.<span class="hljs-property">value</span>!.<span class="hljs-title function_">clearFiles</span>();<br>  <span class="hljs-keyword">const</span> file = files[<span class="hljs-number">0</span>];<br>  file.<span class="hljs-property">uid</span> = <span class="hljs-title function_">genFileId</span>();<br>  uploadRef.<span class="hljs-property">value</span>!.<span class="hljs-title function_">handleStart</span>(file);<br>  importData.<span class="hljs-property">file</span> = file;<br>&#125;<br><br><span class="hljs-comment">// 打开导入弹窗</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">DialogImport</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  showDialogImport.<span class="hljs-property">value</span> = <span class="hljs-literal">true</span>;<br>&#125;;<br><br><span class="hljs-comment">// 提交导入</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">importToExcel</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (!importData?.<span class="hljs-property">file</span>) &#123;<br>    <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">warning</span>(<span class="hljs-string">&quot;上传Excel文件不能为空&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-title class_">CustomerAPI</span>.<span class="hljs-title function_">importCustmoer</span>(importData.<span class="hljs-property">file</span>)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">success</span>(<span class="hljs-string">&quot;导入成功&quot;</span>);<br>      showDialogImport.<span class="hljs-property">value</span> = <span class="hljs-literal">false</span>;<br>      <span class="hljs-title function_">findAll</span>();  <span class="hljs-comment">// 刷新表格数据</span><br>    &#125;)<br>    .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>      <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;导入失败，请重试&quot;</span>);<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>    &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>findAll 这个方法是刷新表格数据 这里没有自己写一个 就可以 主要是处理导入功能</p></blockquote><h3 id="后端-API接口"><a href="#后端-API接口" class="headerlink" title="后端 API接口"></a>后端 API接口</h3><blockquote><p>request 是封装的请求</p><p>.&#x2F;model 是请求参数和响应数据</p><p>.&#x2F;index 接口</p></blockquote><p>.&#x2F;index</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/utils/request&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">BasePageQuery</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./model&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomerAPI</span> &#123;<br>    <br>  <span class="hljs-comment">// 数据列表导入模板下载</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">customerTemplate</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">request</span>(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/api/v1/customers/template&quot;</span>,<br>      <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;get&quot;</span>,<br>      <span class="hljs-attr">responseType</span>: <span class="hljs-string">&quot;arraybuffer&quot;</span>,<br>    &#125;);<br>  &#125;<br>    <br>  <span class="hljs-comment">// 导出</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">exportCustmoer</span>(<span class="hljs-params"><span class="hljs-attr">data</span>: <span class="hljs-title class_">BasePageQuery</span></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">request</span>(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/api/v1/customers/_export&quot;</span>,<br>      <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;get&quot;</span>,<br>      <span class="hljs-attr">params</span>: data,<br>      <span class="hljs-attr">responseType</span>: <span class="hljs-string">&quot;arraybuffer&quot;</span>,<br>    &#125;);<br>  &#125;<br>    <br>  <span class="hljs-comment">// 导入</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">importCustmoer</span>(<span class="hljs-params"><span class="hljs-attr">file</span>: <span class="hljs-title class_">File</span></span>) &#123;<br>    <span class="hljs-keyword">const</span> formData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>();<br>    formData.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;file&quot;</span>, file);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">request</span>(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/api/v1/customers/_import&quot;</span>,<br>      <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>      <span class="hljs-attr">data</span>: formData,<br>      <span class="hljs-attr">headers</span>: &#123;<br>        <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;multipart/form-data&quot;</span>,<br>      &#125;,<br>    &#125;);<br>  &#125;<br>    <br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">CustomerAPI</span>;<br></code></pre></td></tr></table></figure><p>.&#x2F;model</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BasePageQuery</span> &#123;<br>  <span class="hljs-attr">pageNum</span>: <span class="hljs-built_in">number</span>;<br>  <span class="hljs-attr">pageSize</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>本文展示了如何在 Vue 项目中使用 Element Plus 实现数据的导入、导出和模板下载功能。通过调用后端 API 并结合前端 Blob 和 URL 对象，可以轻松地处理 Excel 文件的上传和下载。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 Vue 中进行日期格式转换</title>
    <link href="/huyanqun.github.io/2024/10/17/%E5%9C%A8-Vue-%E4%B8%AD%E8%BF%9B%E8%A1%8C%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/"/>
    <url>/huyanqun.github.io/2024/10/17/%E5%9C%A8-Vue-%E4%B8%AD%E8%BF%9B%E8%A1%8C%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<blockquote><p>日期和时间的格式转换在前端开发中是一个常见需求，特别是在处理从后端获取到的时间数据时。本文将介绍如何在 Vue 中使用原生 JavaScript 和第三方库 <code>dayjs</code> 进行日期和时间格式转换，并展示两种实现方法的优缺点</p></blockquote><h3 id="使用原生-JavaScript-进行日期格式转换"><a href="#使用原生-JavaScript-进行日期格式转换" class="headerlink" title="使用原生 JavaScript 进行日期格式转换"></a>使用原生 JavaScript 进行日期格式转换</h3><blockquote><p>在 Vue 中，原生的 <code>Date</code> 对象提供了基础的日期操作能力。借助 <code>Intl.DateTimeFormat</code>，我们可以方便地按照特定的区域和格式对日期进行处理。以下是如何使用原生 JavaScript 在 Vue 中进行日期格式转换的示例</p></blockquote><blockquote><p>template 布局容器</p><p><code>:data=&quot;List&quot;</code> 的数据来源于接口 当然也可以自己 <code>mock</code>假数据</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-table</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;List&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;Name&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;名称&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;最大时间&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>=<span class="hljs-string">&quot;scope&quot;</span>&gt;</span><br>      &#123;&#123; formatTime(scope.row.maxTime) &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span><br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> <span class="hljs-attr">:model</span>=<span class="hljs-string">&quot;form&quot;</span> <span class="hljs-attr">label-width</span>=<span class="hljs-string">&quot;80px&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;创建时间&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;createTime&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;formatTime(form.createTime)&quot;</span> <span class="hljs-attr">disabled</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>script </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">formatTime</span> = (<span class="hljs-params">time: any</span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (!time) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-comment">// 将 ISO 时间转换为 Date 对象</span><br>  <span class="hljs-keyword">const</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(time);<br>  <span class="hljs-comment">// 使用 Intl.DateTimeFormat 进行格式化</span><br>  <span class="hljs-keyword">const</span> formatter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intl</span>.<span class="hljs-title class_">DateTimeFormat</span>(<span class="hljs-string">&quot;zh-CN&quot;</span>, &#123;<br>    <span class="hljs-attr">year</span>: <span class="hljs-string">&quot;numeric&quot;</span>,<br>    <span class="hljs-attr">month</span>: <span class="hljs-string">&quot;long&quot;</span>,<br>    <span class="hljs-attr">day</span>: <span class="hljs-string">&quot;numeric&quot;</span>,<br>    <span class="hljs-attr">hour</span>: <span class="hljs-string">&quot;numeric&quot;</span>,<br>    <span class="hljs-attr">minute</span>: <span class="hljs-string">&quot;numeric&quot;</span>,<br>    <span class="hljs-attr">second</span>: <span class="hljs-string">&quot;numeric&quot;</span>,<br>  &#125;);<br>  <span class="hljs-keyword">return</span> formatter.<span class="hljs-title function_">format</span>(date);   <span class="hljs-comment">// 返回格式化后的日期时间</span><br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="效果展示："><a href="#效果展示：" class="headerlink" title="效果展示："></a>效果展示：</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">原始时间: 2024-10-14T16:00:00</span><br><span class="hljs-section">格式化后的时间: 2024年10月14日 16:00:00</span><br></code></pre></td></tr></table></figure><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ul><li><strong>无需外部依赖</strong>：直接使用浏览器的 <code>Date</code> 对象，减少打包体积。</li><li><strong>区域化支持</strong>：<code>Intl.DateTimeFormat</code> 支持多种语言和区域格式。</li></ul><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><ul><li><strong>功能有限</strong>：对于复杂的日期处理场景（如时区转换、日期加减运算），原生方法的支持不够友好。</li><li><strong>代码复杂度较高</strong>：处理不同格式或自定义格式需要更多代码。</li></ul><h3 id="使用-dayjs-进行日期格式转换"><a href="#使用-dayjs-进行日期格式转换" class="headerlink" title="使用 dayjs 进行日期格式转换"></a>使用 <code>dayjs</code> 进行日期格式转换</h3><blockquote><p>相比于原生 JavaScript，<code>dayjs</code> 是一个轻量级的日期处理库，提供了丰富的 API 来简化日期处理任务。它的语法简单，支持插件扩展，并且与 <code>moment.js</code> 有相似的用法，但体积更小</p></blockquote><p><strong>安装 dayjs</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install dayjs<br></code></pre></td></tr></table></figure><p>示例代码：</p><blockquote><p>template 布局容器 跟上面原生的一样</p></blockquote><blockquote><p>script   在你的 Vue 组件中引入 <code>dayjs</code> </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> dayjs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;dayjs&#x27;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">formatTime</span> = (<span class="hljs-params">time: any</span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (!time) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">dayjs</span>(time).<span class="hljs-title function_">format</span>(<span class="hljs-string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p><code>format(&quot;YYYY-MM-DD HH:mm:ss&quot;)</code> 格式是自己定的 看自己喜好 当然也可以是 <code>format(&#39;YYYY年MM月DD日 HH:mm:ss&#39;)</code>  </p></blockquote><h4 id="效果展示：-1"><a href="#效果展示：-1" class="headerlink" title="效果展示："></a>效果展示：</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">原始时间: 2024-10-14T16:00:00</span><br><span class="hljs-section">格式化后的时间: 2024-10-14 16:00:00</span><br></code></pre></td></tr></table></figure><h4 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h4><ul><li><strong>轻量高效</strong>：<code>dayjs</code> 非常轻量，体积比 <code>moment.js</code> 小得多，但保留了大部分功能。</li><li><strong>API 简单易用</strong>：链式调用和简单的格式化规则使得代码更简洁。</li><li><strong>插件支持</strong>：可以根据需要添加插件，例如支持时间相对计算、时区处理等功能。</li></ul><h4 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h4><ul><li><strong>额外依赖</strong>：需要引入第三方库，尽管它非常轻量。</li></ul><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>在 Vue 项目中，处理日期格式的转换可以根据需求选择不同的方法。如果项目对日期处理的需求较为基础，原生的 JavaScript <code>Date</code> 对象已经足够应对。然而，若是需要更多的日期处理功能，比如时区转换、日期计算等，<code>dayjs</code> 则是一个优秀的选择</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入解析 GET 与 POST 请求的区别与传参方式详解</title>
    <link href="/huyanqun.github.io/2024/10/15/%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90-GET-%E4%B8%8E-POST-%E8%AF%B7%E6%B1%82%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E4%BC%A0%E5%8F%82%E6%96%B9%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
    <url>/huyanqun.github.io/2024/10/15/%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90-GET-%E4%B8%8E-POST-%E8%AF%B7%E6%B1%82%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E4%BC%A0%E5%8F%82%E6%96%B9%E5%BC%8F%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在前端开发中，常常会用到 <code>GET</code> 和 <code>POST</code> 请求来与后端进行数据交互。<code>GET</code> 和 <code>POST</code> 的主要区别不仅仅在于 HTTP 方法的不同，还在于数据传递的方式以及适用场景。具体来说，<code>GET</code> 使用 URL 参数传递数据，而 <code>POST</code> 使用请求体（body）传递数据</p></blockquote><h3 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a><code>GET</code> 请求</h3><h4 id="传参方式：params"><a href="#传参方式：params" class="headerlink" title="传参方式：params"></a>传参方式：<code>params</code></h4><ul><li><strong>GET 请求通过 URL 传递参数</strong>，参数会被拼接在请求 URL 的末尾。</li><li>参数格式通常是 <code>?key=value</code> 的形式，多个参数用 <code>&amp;</code> 分隔。</li><li>传递参数时在 <code>Axios</code> 或其他 HTTP 库中通过 <code>params</code> 字段来传递参数。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 使用 GET 请求通过 params 传递参数</span><br>axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/api/customer&#x27;</span>, &#123;<br>  <span class="hljs-attr">params</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;John Doe&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">30</span>,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><blockquote><p>请求的 URL 会自动变为 <code>/api/customer?name=John%20Doe&amp;age=30</code>，参数被附加在 URL 后面</p></blockquote><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ul><li><strong>可见性</strong>：<code>GET</code> 请求的参数会暴露在 URL 中，浏览器地址栏也可以看到这些参数，因此不适合传递敏感数据。</li><li><strong>长度限制</strong>：<code>GET</code> 请求的 URL 长度通常有限制（大多数浏览器限制在 2048 个字符以内），所以不适合传递大量数据。</li><li><strong>缓存性</strong>：<code>GET</code> 请求可以被缓存，这意味着在多次请求相同的 URL 时，浏览器可能直接使用缓存的响应。</li><li><strong>幂等性</strong>：<code>GET</code> 请求是幂等的，这意味着对同一资源进行多次相同的 <code>GET</code> 请求，返回的结果应该是相同的，不会产生副作用。</li></ul><h4 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h4><ul><li>获取资源或数据，通常用于查询操作。</li><li>适用于参数数量较少，且数据无需保密的场景。</li><li>可以用于希望通过 URL 书签或分享链接传递查询条件的场景。</li></ul><h3 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a><code>POST</code> 请求</h3><h4 id="传参方式：data"><a href="#传参方式：data" class="headerlink" title="传参方式：data"></a>传参方式：<code>data</code></h4><ul><li><strong>POST 请求通过请求体（body）传递参数</strong>，参数不会显示在 URL 中。</li><li>数据格式通常为 JSON、表单数据（<code>application/x-www-form-urlencoded</code>）或二进制数据（如文件上传）。</li><li>传递参数时在 <code>Axios</code> 或其他 HTTP 库中通过 <code>data</code> 字段来传递。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 使用 POST 请求通过 data 传递参数</span><br>axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/customer&#x27;</span>, &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;John Doe&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">30</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><blockquote><p>参数 <code>name</code> 和 <code>age</code> 会包含在请求体中，并不会出现在 URL 中。</p></blockquote><h4 id="特点：-1"><a href="#特点：-1" class="headerlink" title="特点："></a>特点：</h4><ul><li><strong>数据保密性更好</strong>：参数不会暴露在 URL 中，适合传递敏感数据。</li><li><strong>没有长度限制</strong>：<code>POST</code> 请求的数据是通过请求体传递的，理论上没有长度限制，可以传递大量数据。</li><li><strong>不能被缓存</strong>：通常 <code>POST</code> 请求不会被缓存，因为它通常用于修改或创建资源。</li><li><strong>非幂等性</strong>：<code>POST</code> 请求通常不是幂等的，这意味着多次相同的 <code>POST</code> 请求可能会导致不同的结果，例如重复提交表单可能导致多次插入记录。</li></ul><h4 id="使用场景：-1"><a href="#使用场景：-1" class="headerlink" title="使用场景："></a>使用场景：</h4><ul><li>创建资源或更新资源时使用（如提交表单、上传文件）。</li><li>传递大量数据或敏感数据时使用。</li><li>数据修改或写操作</li></ul><h3 id="GET-和-POST-请求的主要区别"><a href="#GET-和-POST-请求的主要区别" class="headerlink" title="GET 和 POST 请求的主要区别"></a><code>GET</code> 和 <code>POST</code> 请求的主要区别</h3><table><thead><tr><th>特点</th><th><code>GET</code> 请求</th><th><code>POST</code> 请求</th></tr></thead><tbody><tr><td><strong>传递方式</strong></td><td>参数通过 URL（<code>params</code>）传递</td><td>参数通过请求体（<code>data</code>）传递</td></tr><tr><td><strong>可见性</strong></td><td>参数可见，暴露在 URL 中</td><td>参数不可见，隐藏在请求体中</td></tr><tr><td><strong>数据长度</strong></td><td>有长度限制（通常 2048 个字符以内）</td><td>理论上没有限制，适合传递大量数据</td></tr><tr><td><strong>缓存</strong></td><td>可以被缓存</td><td>不会被缓存</td></tr><tr><td><strong>适用场景</strong></td><td>主要用于查询数据（获取资源）</td><td>主要用于提交数据（创建、修改资源）</td></tr><tr><td><strong>幂等性</strong></td><td>幂等的，重复请求不会改变资源状态</td><td>通常不是幂等的，重复请求可能会产生副作用</td></tr><tr><td><strong>敏感数据</strong></td><td>不适合传递敏感数据</td><td>适合传递敏感数据</td></tr><tr><td><strong>书签&#x2F;分享</strong></td><td>URL 可以被书签或分享，传递查询参数</td><td>不适合用于需要通过 URL 传递的场景</td></tr></tbody></table><h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><ul><li><strong>GET 请求</strong>：适用于查询、获取资源的场景，参数通过 URL 传递，有限制且容易被缓存，不适合传递敏感数据。</li><li><strong>POST 请求</strong>：适用于创建或修改资源，参数通过请求体传递，安全性好，适合传递大数据或敏感数据。</li></ul><p><span class="label label-primary">在使用 <code>GET</code> 时，传参使用 <code>params</code>，而在 <code>POST</code> 请求时，传参则使用 <code>data</code>。</span></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTTP协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo 配置评论功能（utterances）</title>
    <link href="/huyanqun.github.io/2024/10/11/hexo-%E9%85%8D%E7%BD%AE%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%EF%BC%88utterances%EF%BC%89/"/>
    <url>/huyanqun.github.io/2024/10/11/hexo-%E9%85%8D%E7%BD%AE%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%EF%BC%88utterances%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>在 Fluid 主题（通常用于 Hexo 博客）中安装 <code>utterances</code>（一个基于 GitHub Issues 的评论系统）</p><h3 id="1-安装-Fluid-主题"><a href="#1-安装-Fluid-主题" class="headerlink" title="1.安装 Fluid 主题"></a>1.安装 Fluid 主题</h3><p>确保你已经正确安装并配置了 Fluid 主题。如果还没有安装，你可以按照 Fluid 官方文档 完成主题安装。</p><h3 id="2-注册-GitHub-账号"><a href="#2-注册-GitHub-账号" class="headerlink" title="2.注册 GitHub 账号"></a>2.注册 GitHub 账号</h3><p>Utterances 依赖于 GitHub Issues 作为评论数据源，所以<code>你需要有一个 GitHub 仓库作为评论存储地</code>。如果还没有，你需要<code>创建一个新的 GitHub 仓库</code>：</p><p>创建一个新的公开或私有仓库，用于存储评论</p><img src="new.png" class="custom-img" /><p>github安装utterances </p><img src="utterances.png" class="custom-img" /><img src="insUtterances.png" class="custom-img" /><h3 id="3-启用-Utterances"><a href="#3-启用-Utterances" class="headerlink" title="3.启用 Utterances"></a>3.启用 Utterances</h3><p>Utterances 是通过 HTML 脚本嵌入到页面中的，Fluid 主题通常提供了一个集成评论系统的配置方式。你只需要在<code>主题的 _config.yml</code> 中添加 Utterances 的相关配置。</p><p>编辑你的主题配置文件 <code>_config.fluid.yml</code> 或者 <code>themes/fluid/_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 评论插件</span><br><span class="hljs-comment"># Comment plugin</span><br><span class="hljs-attr">comments:</span><br><span class="hljs-comment">#开启评论插件</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 指定的插件，需要同时设置对应插件的必要参数</span><br>  <span class="hljs-comment"># The specified plugin needs to set the necessary parameters at the same time</span><br>  <span class="hljs-comment"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">utterances</span><br></code></pre></td></tr></table></figure><p>配置utterances插件 在_config.fluid.yml文件找到utterances进行修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Utterances</span><br><span class="hljs-comment"># 基于 GitHub Issues</span><br><span class="hljs-comment"># Based on GitHub Issues</span><br><span class="hljs-comment"># See: https://utteranc.es</span><br><span class="hljs-attr">utterances:</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">&lt;你的</span> <span class="hljs-string">GitHub</span> <span class="hljs-string">用户名&gt;/&lt;你的仓库名&gt;</span>  <span class="hljs-comment"># 例如: yourusername/yourrepo</span><br>  <span class="hljs-attr">issue_term:</span> <span class="hljs-string">pathname</span><br>  <span class="hljs-attr">label:</span> <span class="hljs-string">utterances</span><br>  <span class="hljs-attr">theme:</span> <span class="hljs-string">github-light</span><br>  <span class="hljs-attr">theme_dark:</span> <span class="hljs-string">github-dark</span><br></code></pre></td></tr></table></figure><p>配置说明：</p><ul><li><code>repo</code>：填写你的 GitHub 用户名和评论用的仓库名，格式为 <code>username/repository</code>。</li><li><code>issue_term</code>：定义评论关联方式，通常使用 <code>pathname</code> 或 <code>url</code>。</li><li><code>theme</code>：Utterances 支持不同的主题风格，你可以选择 <code>github-light</code>、<code>github-dark</code> 等。</li><li><code>label</code>：设置在 GitHub Issue 中显示的标签。</li></ul><p><code>utterances</code> 需要的是 HTTPS 格式的仓库地址，你只需提供 GitHub 用户名和仓库名的组合，形如 <code>username/repo</code></p><h3 id="4-部署测试"><a href="#4-部署测试" class="headerlink" title="4.部署测试"></a>4.部署测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure><p>看到以下内容 即为配置成功</p><img src="comment.png" class="custom-img" /><blockquote><p>如果有些页面没有出现此评论插件可以在文章开头手动打开也可以多刷新刷新</p></blockquote><img src="comm.png" class="custom-img" /><p>如果有人评论了 就会看仓库的 issues 里面看到</p><img src="cs.png" class="custom-img" /><p>然后在 issues 里面可以引用回复</p><img src="reply.png" class="custom-img" />]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo-theme-fluid</title>
    <link href="/huyanqun.github.io/2024/10/09/hexo-theme-fluid/"/>
    <url>/huyanqun.github.io/2024/10/09/hexo-theme-fluid/</url>
    
    <content type="html"><![CDATA[<p>一款 Material Design 风格的主题</p><h3 id="主题简介"><a href="#主题简介" class="headerlink" title="主题简介"></a>主题简介</h3><p>Fluid 是基于 Hexo 的一款 Material Design 风格的主题，由 <a href="https://github.com/fluid-dev">Fluid-dev</a>负责开发与维护。</p><p>主题 GitHub: <a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></p><p>预览网站：<a href="https://hexo.fluid-dev.com/">Fluid’s blog</a> <a href="https://zkqiang.cn/">zkqiang’s blog</a></p><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><p>1.获取主题</p><p>Hexo 5.0.0 版本以上，推荐通过 npm 直接安装，进入博客目录执行命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>2.指定主题</p><p>修改 Hexo 博客目录中的 <code>_config.yml</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">theme: fluid  <span class="hljs-comment"># 指定主题</span><br><br>language: zh-CN  <span class="hljs-comment"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><p>3.创建「关于页」</p><p>首次使用主题的「关于页」需要手动创建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page about<br></code></pre></td></tr></table></figure><p>创建成功后，编辑博客目录下 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性。</p><p>修改后的文件示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">---<br>title: about<br><span class="hljs-built_in">date</span>: 2024-10-09 13:48:21<br>layout: about<br>---<br><br>这里写关于页的正文，支持 Markdown, HTML<br></code></pre></td></tr></table></figure><blockquote><p>WARNING</p><p><code>layout: about</code> 必须存在，并且不能修改成其他值，否则不会显示头像等样式。</p></blockquote><h3 id="启动查看"><a href="#启动查看" class="headerlink" title="启动查看"></a>启动查看</h3><p>1.清理 Hexo 生成的缓存文件和静态文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br></code></pre></td></tr></table></figure><p>2.生成静态网页文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate<br><span class="hljs-comment"># or</span><br>hexo g<br></code></pre></td></tr></table></figure><p>3.部署生成的静态网页到远程服务器或托管服务 (如 GitHub Pages)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo deploy<br><span class="hljs-comment"># or</span><br>hexo d<br></code></pre></td></tr></table></figure><p>4.启动一个本地服务器，便于在本地预览生成的网站</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br><span class="hljs-comment"># or</span><br>hexo s<br></code></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>1.顶部菜单背景色</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">navbar_bg_color: <span class="hljs-string">&quot;#2f4154&quot;</span><br>navbar_bg_color_dark: <span class="hljs-string">&quot;#1f3144&quot;</span><br></code></pre></td></tr></table></figure><p>2.导航栏左侧的标题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">blog_title: <span class="hljs-string">&quot;Fluid&quot;</span><br></code></pre></td></tr></table></figure><p>3.导航栏菜单，可自行增减</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">menu:<br>  - &#123; key: <span class="hljs-string">&quot;home&quot;</span>, <span class="hljs-built_in">link</span>: <span class="hljs-string">&quot;/&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-home-fill&quot;</span> &#125;<br>  - &#123; key: <span class="hljs-string">&quot;archive&quot;</span>, <span class="hljs-built_in">link</span>: <span class="hljs-string">&quot;/archives/&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-archive-fill&quot;</span> &#125;<br>  - &#123; key: <span class="hljs-string">&quot;category&quot;</span>, <span class="hljs-built_in">link</span>: <span class="hljs-string">&quot;/categories/&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-category-fill&quot;</span> &#125;<br>  - &#123; key: <span class="hljs-string">&quot;tag&quot;</span>, <span class="hljs-built_in">link</span>: <span class="hljs-string">&quot;/tags/&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-tags-fill&quot;</span> &#125;<br>  - &#123; key: <span class="hljs-string">&quot;links&quot;</span>, <span class="hljs-built_in">link</span>: <span class="hljs-string">&quot;/links/&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-link-fill&quot;</span> &#125;<br>  - &#123; key: <span class="hljs-string">&quot;about&quot;</span>, <span class="hljs-built_in">link</span>: <span class="hljs-string">&quot;/about/&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-user-fill&quot;</span> &#125;<br></code></pre></td></tr></table></figure><p>4.Banner 头图 (每个页面有，按自己喜好配置)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">banner_img: /img/index.png<br></code></pre></td></tr></table></figure><p>5.首页副标题的独立设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">slogan:<br>   <span class="hljs-built_in">enable</span>: <span class="hljs-literal">true</span><br>   text: <span class="hljs-string">&quot;记录成长之路，分享生活点滴&quot;</span><br></code></pre></td></tr></table></figure><p>6.浏览量计数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">views:<br>  <span class="hljs-built_in">enable</span>: <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>7.在文章开头显示文章更新时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">updated:<br>    <span class="hljs-built_in">enable</span>: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>8.显示更新日期</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">update_date:<br>    <span class="hljs-built_in">enable</span>: <span class="hljs-literal">true</span><br>    format: <span class="hljs-string">&quot;LL&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 主题的使用</title>
    <link href="/huyanqun.github.io/2024/10/08/Hexo%20%E4%B8%BB%E9%A2%98%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/huyanqun.github.io/2024/10/08/Hexo%20%E4%B8%BB%E9%A2%98%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="采用npm安装的主题怎么修改源代码"><a href="#采用npm安装的主题怎么修改源代码" class="headerlink" title="采用npm安装的主题怎么修改源代码"></a>采用npm安装的主题怎么修改源代码</h3><p>1.找到主题目录</p><p>通常，当你通过 npm 安装 Hexo 主题时，主题会被安装在 <code>node_modules</code> 目录下。首先，你需要找到这个目录。假设你的 Hexo 项目结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">your-hexo-project/    <span class="hljs-comment">#你的项目名</span><br>│<br>├── node_modules/<br>│   └── hexo-theme-name/<br>│<br>├── <span class="hljs-built_in">source</span>/<br>│<br>├── themes/<br>│   └── hexo-theme-name/<br>│<br>└── package.json<br><br></code></pre></td></tr></table></figure><p>在这个结构中，你的主题代码通常位于 <code>node_modules/hexo-theme-name</code>。</p><p>2.复制主题文件到你的 Hexo 项目中</p><p>由于 <code>node_modules</code> 中的文件可能会在更新主题时被覆盖，因此最好将主题复制到 Hexo 项目的 <code>themes</code> 目录中。这可以确保你的修改不会在未来的 npm 更新中丢失。</p><p>在命令行中，你可以使用以下命令（将 <code>hexo-theme-name</code> 替换为实际的主题名称）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在 Hexo 项目的根目录下</span><br><span class="hljs-built_in">cp</span> -r node_modules/hexo-theme-name themes/<br></code></pre></td></tr></table></figure><p>3.修改主题代码</p><p>进入到你复制的主题文件夹中，然后你可以自由修改代码。通常，主题的主要代码文件位于以下目录中：</p><ul><li>**layouts&#x2F;**：包含页面布局和模板文件（如 EJS、Pug 等）。</li><li>**source&#x2F;**：包含静态文件（如样式表、JavaScript、图片等）。</li><li><strong>_config.yml</strong>：主题的配置文件。</li></ul><p>根据你的需求，打开相应的文件进行修改。</p><p>4.使用自定义主题</p><p>在 Hexo 的 <code>_config.yml</code> 文件中，确保使用你复制的主题。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">theme: hexo-theme-name<br></code></pre></td></tr></table></figure><p>5.生成和查看效果</p><p>修改完主题源代码后，运行以下命令生成 Hexo 网站并启动本地服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo generate<br>hexo server<br></code></pre></td></tr></table></figure><p>然后在浏览器中访问 <code>http://localhost:4000</code>，查看你的修改效果。</p><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><p>在开启 <code>post_asset_folder: true</code> 的情况下。也就是新建一篇文章会创建一个同名的目录，图片资源直接放置在里面就可以了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;3419353.png&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="自定义样式"><a href="#自定义样式" class="headerlink" title="自定义样式"></a>自定义样式</h3><p>1.通过 CSS 全局样式修改</p><p>你可以在 <code>source/css/_custom.scss</code> 或 <code>source/css/style.css</code> 文件中添加全局的样式规则，应用于所有的图片，或者为特定的图片添加自定义样式</p><p>示例：为所有图片添加圆角、阴影和大小</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">img</span> &#123;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;         <span class="hljs-comment">/* 圆角 */</span><br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">4px</span> <span class="hljs-number">8px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.2</span>);  <span class="hljs-comment">/* 添加阴影 */</span><br>    <span class="hljs-attribute">display</span>: block; <span class="hljs-comment">/* 使图片成为块级元素 */</span><br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> auto; <span class="hljs-comment">/* 水平居中 */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果你只想给特定的图片添加样式，可以给 <code>&lt;img&gt;</code> 标签加上类名：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;new.png&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;custom-img&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>然后在 CSS 中针对这个类名添加样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.custom-img</span> &#123;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;         <span class="hljs-comment">/* 圆角 */</span><br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">4px</span> <span class="hljs-number">8px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.2</span>);  <span class="hljs-comment">/* 添加阴影 */</span><br>    <span class="hljs-attribute">display</span>: block; <span class="hljs-comment">/* 使图片成为块级元素 */</span><br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> auto; <span class="hljs-comment">/* 水平居中 */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>2.使用内联样式</p><p>如果你不想修改 CSS 文件，或者只是想为单张图片添加样式，可以直接在 HTML 中使用内联样式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;new.png&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border-radius: 15px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);display: block;margin: 10px auto;&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>前提是要确保你的 <code>_custom.scss</code> 或 <code>style.css</code> 被正确引入。Fluid 主题通常有一个自定义样式的地方，比如 <code>source/css/_custom.scss</code></p></blockquote><blockquote><p>你可以通过检查主题配置文件 <code>fluid_config.yml</code>或者<code>config.yml</code>，确保自定义样式文件被引入：</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 如果有启用自定义样式文件</span><br><span class="hljs-attr">custom_css:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/css/custom.css</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
